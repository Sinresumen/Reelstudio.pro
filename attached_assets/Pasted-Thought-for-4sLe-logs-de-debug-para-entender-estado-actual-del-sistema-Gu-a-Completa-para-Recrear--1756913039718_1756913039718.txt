Thought for 4sLeí logs de debug para entender estado actual del sistema# Guía Completa para Recrear VideoVenta System

## 1. Descripción General del Proyecto

**VideoVenta System** es una plataforma web para venta de servicios de video con:

- Calculadora de precios dinámica
- Panel de administración para gestión de clientes
- Sistema de entrega de contenido a clientes
- Configuración editable de precios y WhatsApp


## 2. Stack Tecnológico Recomendado

```plaintext
Frontend: Next.js 14+ con TypeScript
UI: Tailwind CSS + shadcn/ui components
Base de datos: Supabase (PostgreSQL) o alternativa simple
Hosting: Vercel, Netlify, o similar
```

## 3. Estructura de Archivos

```plaintext
/app
  /admin/page.tsx          # Panel de administración
  /client/[username]/page.tsx  # Página de entrega al cliente
  /layout.tsx              # Layout principal
  /page.tsx               # Página principal
/components
  /ui/                    # Componentes shadcn/ui
  reelstudio-app.tsx      # Componente principal
/lib
  /supabase/client.ts     # Cliente de Supabase (opcional)
```

## 4. Funcionalidades Principales

### 4.1 Página Principal (Landing Page)

- **Header**: Logo, navegación, botón de contacto
- **Hero Section**: Título principal, descripción, CTA
- **Videos de Muestra**: 3 videos de ejemplo (Corporativo, Promocional, Explicativo)
- **Calculadora de Precios**:

- Duración: 5-10 min ($1600), 10-20 min ($2600), 20-30 min ($3500)
- Cantidad: 15 (x1), 30 (x1.8), 60 (x3.2), 120 (x5.8) videos
- Velocidad: Normal (x1), Rápido (x1.2), Extremo (x1.5)



- **Videos Cantados**: Paquetes fijos (Básico $1600, Estándar $3000, Premium $5500, Empresarial $9900)
- **Contacto**: Formulario con WhatsApp integration


### 4.2 Panel de Administración (/admin)

- **Autenticación**: Contraseña simple
- **Dashboard**: Estadísticas básicas
- **Gestión de Clientes**:

- Agregar cliente (nombre, email, teléfono)
- Crear proyectos por cliente
- Agregar enlaces de descarga
- Generar enlaces únicos para entrega



- **Configuración Editable**:

- Número de WhatsApp
- Precios (edición directa desde panel)
- Textos principales





### 4.3 Página del Cliente (/client/[username])

- **Información del proyecto**
- **Enlaces de descarga**
- **PDF de licencia/derechos**
- **Interfaz limpia y profesional**


## 5. Configuración de Precios (Hardcodeada)

```javascript
const hardcodedPricing = {
  durations: {
    "5-10": { price: { mxn: 1600, usd: 89 }, label: "5-10 minutos" },
    "10-20": { price: { mxn: 2600, usd: 144 }, label: "10-20 minutos" },
    "20-30": { price: { mxn: 3500, usd: 194 }, label: "20-30 minutos" }
  },
  speeds: {
    normal: { multiplier: 1.0, label: "Normal (2-5 días)" },
    fast: { multiplier: 1.2, label: "Rápido (2-3 días)" },
    extreme: { multiplier: 1.5, label: "Extremo (1-2 días)" }
  },
  quantities: {
    15: { multiplier: 1.0, label: "15 videos" },
    30: { multiplier: 1.8, label: "30 videos" },
    60: { multiplier: 3.2, label: "60 videos" },
    120: { multiplier: 5.8, label: "120 videos" }
  },
  singingPackages: {
    basic: { price: { mxn: 1600, usd: 89 }, videos: 15 },
    standard: { price: { mxn: 3000, usd: 167 }, videos: 30 },
    premium: { price: { mxn: 5500, usd: 306 }, videos: 60 },
    business: { price: { mxn: 9900, usd: 550 }, videos: 120 }
  }
}
```

## 6. Base de Datos (Opcional - usar localStorage como alternativa)

### Tabla: clients

```sql
CREATE TABLE clients (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255),
  phone VARCHAR(50),
  username VARCHAR(100) UNIQUE,
  projects JSONB DEFAULT '[]',
  created_at TIMESTAMP DEFAULT NOW()
);
```

### Tabla: site_config (para configuraciones editables)

```sql
CREATE TABLE site_config (
  id SERIAL PRIMARY KEY,
  whatsapp_number VARCHAR(50),
  whatsapp_business_name VARCHAR(255),
  pricing_config JSONB,
  updated_at TIMESTAMP DEFAULT NOW()
);
```

## 7. Configuración de WhatsApp

```javascript
const whatsappConfig = {
  number: "+5215512345678", // Editable desde admin
  businessName: "VideoVenta", // Editable desde admin
  useAPI: false, // true para API empresarial
  apiEndpoint: "https://api.whatsapp.com/send" // Para API empresarial
}
```

## 8. Componentes UI Necesarios

- Button, Card, Input, Label, Select
- Table, TableHeader, TableBody, TableRow, TableCell
- Dialog, Tabs, TabsContent, TabsList, TabsTrigger
- Badge, Alert, Separator


## 9. Funciones Clave

### Calculadora de Precios

```javascript
function calculatePrice(duration, speed, quantity) {
  const basePrice = hardcodedPricing.durations[duration].price.mxn;
  const speedMultiplier = hardcodedPricing.speeds[speed].multiplier;
  const quantityMultiplier = hardcodedPricing.quantities[quantity].multiplier;
  
  return Math.round(basePrice * speedMultiplier * quantityMultiplier);
}
```

### Gestión de Clientes (localStorage)

```javascript
function addClient(clientData) {
  const clients = JSON.parse(localStorage.getItem('clients') || '[]');
  const newClient = {
    ...clientData,
    id: Date.now(),
    username: generateUsername(clientData.name),
    projects: [],
    createdAt: new Date().toISOString()
  };
  clients.push(newClient);
  localStorage.setItem('clients', JSON.stringify(clients));
  return newClient;
}
```

## 10. Hosting y Deployment

### Opción 1: Vercel (Recomendado)

- Deploy automático desde GitHub
- Variables de entorno para configuración
- Edge functions para APIs simples


### Opción 2: Netlify

- Similar a Vercel
- Netlify Functions para backend


### Opción 3: Hosting tradicional

- Usar Next.js static export
- Subir archivos estáticos
- Usar localStorage en lugar de base de datos


## 11. Variables de Entorno

```plaintext
NEXT_PUBLIC_SITE_URL=https://tu-dominio.com
NEXT_PUBLIC_WHATSAPP_NUMBER=+5215512345678
ADMIN_PASSWORD=tu-password-seguro
```

## 12. Instrucciones de Implementación

1. **Crear proyecto Next.js**
2. **Instalar dependencias**: tailwindcss, shadcn/ui
3. **Configurar componentes UI**
4. **Implementar página principal con calculadora**
5. **Crear panel de admin con autenticación**
6. **Implementar gestión de clientes**
7. **Crear página de entrega al cliente**
8. **Configurar WhatsApp integration**
9. **Testing y deployment**


## 13. Consideraciones Importantes

- **Simplicidad**: Evitar over-engineering
- **Performance**: Optimizar imágenes y código
- **Responsive**: Mobile-first design
- **SEO**: Meta tags y estructura semántica
- **Seguridad**: Validación de inputs y autenticación