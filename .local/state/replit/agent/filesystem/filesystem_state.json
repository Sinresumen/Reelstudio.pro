{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# VideoVenta System\n\n## Overview\n\nVideoVenta System is a comprehensive web platform for video production services that combines a public-facing landing page with client management capabilities. The system features a dynamic pricing calculator, an administrative panel for managing clients and projects, and personalized delivery pages for client content access. Built with a modern full-stack architecture, it provides real-time pricing calculations, WhatsApp integration for customer communication, and a complete client lifecycle management system.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation via @hookform/resolvers\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Session Management**: express-session with connect-pg-simple for PostgreSQL session storage\n- **API Design**: RESTful endpoints with JSON responses\n- **Development**: Custom Vite integration for hot module replacement in development\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL configured via Drizzle ORM\n- **Schema Management**: Drizzle migrations with push-based deployment\n- **Connection**: Neon Database serverless PostgreSQL driver\n- **Fallback Storage**: In-memory storage implementation for development/testing\n- **Session Store**: PostgreSQL-backed sessions using connect-pg-simple\n\n### Authentication and Authorization\n- **Admin Authentication**: Simple password-based authentication (configurable for production upgrade)\n- **Session Management**: Express sessions with PostgreSQL persistence\n- **Client Access**: Username-based client page access without authentication\n- **API Security**: Basic session validation for admin endpoints\n\n### Component Architecture\n- **Design System**: Fire-themed aesthetic with orange/red color palette\n- **Layout Structure**: \n  - Landing page with hero section, sample videos, and pricing calculator\n  - Admin panel with dashboard, client management, and configuration\n  - Client delivery pages with project status and download links\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n- **State Context**: React Context for global configuration management\n\n### Database Schema\n- **Clients Table**: User information, projects, and contact details\n- **Projects Table**: Project metadata, status tracking, and file management\n- **Site Config Table**: Business settings, pricing configuration, and WhatsApp integration\n- **Type Safety**: Drizzle-zod integration for runtime validation\n\n### API Architecture\n- **Admin Routes**: Authentication, client CRUD, project management\n- **Configuration Routes**: Site settings and pricing management\n- **Public Routes**: Price calculation and client data retrieval\n- **Error Handling**: Centralized error middleware with proper HTTP status codes\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@tanstack/react-query**: Server state management and caching\n- **drizzle-orm** and **drizzle-kit**: Type-safe database operations and migrations\n- **@neondatabase/serverless**: PostgreSQL connection for serverless environments\n- **express**: Node.js web framework for API server\n- **react** and **react-dom**: Core React framework\n\n### UI and Styling Dependencies\n- **@radix-ui/***: Comprehensive set of accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Type-safe variant API for component styling\n- **clsx**: Conditional className utility\n- **lucide-react**: Modern icon library\n\n### Development and Build Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **@vitejs/plugin-react**: React integration for Vite\n- **esbuild**: Fast JavaScript bundler for production builds\n\n### Form and Validation\n- **react-hook-form**: Performant forms with easy validation\n- **@hookform/resolvers**: Integration with validation libraries\n- **zod**: TypeScript-first schema validation (via drizzle-zod)\n\n### Session and Storage\n- **connect-pg-simple**: PostgreSQL session store for Express\n- **express-session**: Session middleware for Express\n\n### Utility Libraries\n- **date-fns**: Modern date utility library\n- **wouter**: Lightweight routing for React\n- **cmdk**: Command palette component\n- **embla-carousel-react**: Carousel component library","size_bytes":4879},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        \"fire-flicker\": \"fire-flicker 2s ease-in-out infinite alternate\",\n        \"glow-pulse\": \"glow-pulse 3s ease-in-out infinite\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n      keyframes: {\n        \"fire-flicker\": {\n          \"0%\": { opacity: \"0.9\", transform: \"scale(1) rotate(0deg)\" },\n          \"100%\": { opacity: \"1\", transform: \"scale(1.05) rotate(1deg)\" }\n        },\n        \"glow-pulse\": {\n          \"0%, 100%\": { boxShadow: \"0 0 20px rgba(255, 69, 0, 0.5)\" },\n          \"50%\": { boxShadow: \"0 0 40px rgba(255, 140, 0, 0.8)\" }\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" }\n        },\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3340},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport connectPgSimple from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { insertClientSchema, insertProjectSchema, insertSiteConfigSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Extend Request type to include session\ninterface AuthRequest extends Request {\n  session: any;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration\n  const PgSession = connectPgSimple(session);\n  app.use(\n    session({\n      store: new PgSession({\n        conString: process.env.DATABASE_URL,\n        createTableIfMissing: true,\n        tableName: 'admin_sessions',\n      }),\n      secret: process.env.SESSION_SECRET || 'videoventa-secret-key-change-in-production',\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        secure: process.env.NODE_ENV === 'production',\n        httpOnly: true,\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      },\n    })\n  );\n\n  // Authentication middleware\n  const requireAuth = (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.session?.isAuthenticated) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    next();\n  };\n\n  // Admin authentication routes\n  app.post(\"/api/admin/login\", async (req: AuthRequest, res) => {\n    const { password } = req.body;\n    \n    // Check password\n    if (password === \"Lothborja1\") {\n      req.session.isAuthenticated = true;\n      res.json({ success: true, message: \"Authentication successful\" });\n    } else {\n      res.status(401).json({ success: false, message: \"Invalid password\" });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", (req: AuthRequest, res) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        return res.status(500).json({ error: 'Could not log out' });\n      }\n      res.json({ success: true });\n    });\n  });\n\n  app.get(\"/api/admin/check-auth\", (req: AuthRequest, res) => {\n    res.json({ isAuthenticated: !!req.session?.isAuthenticated });\n  });\n\n  // Site configuration routes - config GET is public for calculator\n  app.get(\"/api/config\", async (req, res) => {\n    try {\n      const config = await storage.getSiteConfig();\n      res.json(config);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching configuration\" });\n    }\n  });\n\n  app.put(\"/api/config\", requireAuth as any, async (req, res) => {\n    try {\n      const updates = req.body;\n      const updatedConfig = await storage.updateSiteConfig(updates);\n      res.json(updatedConfig);\n    } catch (error) {\n      res.status(500).json({ message: \"Error updating configuration\" });\n    }\n  });\n\n  // Client routes - protected for admin\n  app.get(\"/api/clients\", requireAuth as any, async (req, res) => {\n    try {\n      const clients = await storage.getClients();\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching clients\" });\n    }\n  });\n\n  app.get(\"/api/clients/:id\", async (req, res) => {\n    try {\n      const client = await storage.getClient(req.params.id);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching client\" });\n    }\n  });\n\n  app.get(\"/api/clients/username/:username\", async (req, res) => {\n    try {\n      const client = await storage.getClientByUsername(req.params.username);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching client\" });\n    }\n  });\n\n  app.post(\"/api/clients\", requireAuth as any, async (req, res) => {\n    try {\n      const validatedData = insertClientSchema.parse(req.body);\n      const client = await storage.createClient(validatedData);\n      res.status(201).json(client);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid client data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error creating client\" });\n    }\n  });\n\n  app.put(\"/api/clients/:id\", requireAuth as any, async (req, res) => {\n    try {\n      const updates = req.body;\n      const client = await storage.updateClient(req.params.id, updates);\n      if (!client) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: \"Error updating client\" });\n    }\n  });\n\n  app.delete(\"/api/clients/:id\", requireAuth as any, async (req, res) => {\n    try {\n      const deleted = await storage.deleteClient(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Client not found\" });\n      }\n      res.json({ message: \"Client deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error deleting client\" });\n    }\n  });\n\n  // Project routes - protected for admin\n  app.get(\"/api/projects\", requireAuth as any, async (req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/client/:clientId\", async (req, res) => {\n    try {\n      const projects = await storage.getProjectsByClientId(req.params.clientId);\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching client projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Error fetching project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", requireAuth as any, async (req, res) => {\n    try {\n      const validatedData = insertProjectSchema.parse(req.body);\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid project data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Error creating project\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", requireAuth as any, async (req, res) => {\n    try {\n      const updates = req.body;\n      const project = await storage.updateProject(req.params.id, updates);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ message: \"Error updating project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", requireAuth as any, async (req, res) => {\n    try {\n      const deleted = await storage.deleteProject(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json({ message: \"Project deleted successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Error deleting project\" });\n    }\n  });\n\n  // Price calculation endpoint for narrated videos\n  app.post(\"/api/calculate-price\", async (req, res) => {\n    try {\n      const { duration, speed, quantity, quality = 'hd', videoOptions = {} } = req.body;\n      const config = await storage.getSiteConfig();\n      \n      if (!config) {\n        return res.status(404).json({ message: \"Configuration not found\" });\n      }\n\n      const pricing = config.pricing as any;\n      const narratedPricing = pricing.narratedVideos;\n      \n      // Validar que existen los datos necesarios\n      if (!narratedPricing || !narratedPricing.durations || !narratedPricing.speeds || !narratedPricing.quantities) {\n        return res.status(500).json({ message: \"Invalid pricing configuration\" });\n      }\n      \n      const basePrice = narratedPricing.durations[duration];\n      const speedData = narratedPricing.speeds[speed];\n      const quantityData = narratedPricing.quantities[quantity];\n\n      if (!basePrice) {\n        return res.status(400).json({ message: `Invalid duration: ${duration}` });\n      }\n      \n      if (!speedData) {\n        return res.status(400).json({ message: `Invalid speed: ${speed}` });\n      }\n      \n      if (!quantityData) {\n        return res.status(400).json({ message: `Invalid quantity: ${quantity}` });\n      }\n      \n      const speedMultiplier = speedData.multiplier || 1;\n      const quantityMultiplier = quantityData.multiplier || 1;\n\n      // Calculate quality modifier\n      let qualityMultiplier = 1.0;\n      if (quality === '2k') {\n        qualityMultiplier = 1.10;\n      } else if (quality === '4k') {\n        qualityMultiplier = 1.25;\n      }\n\n      // Calculate video options modifiers\n      let videoOptionsMultiplier = 1.0;\n      const selectedOptions: any = {};\n      \n      Object.keys(videoOptions).forEach(optionType => {\n        const selectedValue = videoOptions[optionType];\n        if (narratedPricing.videoOptions[optionType]?.options[selectedValue]) {\n          const option = narratedPricing.videoOptions[optionType].options[selectedValue];\n          videoOptionsMultiplier *= option.priceModifier;\n          selectedOptions[optionType] = {\n            value: selectedValue,\n            label: option.label,\n            modifier: option.priceModifier\n          };\n        }\n      });\n\n      const totalMXN = Math.round(basePrice.mxn * speedMultiplier * quantityMultiplier * qualityMultiplier * videoOptionsMultiplier);\n      const totalUSD = Math.round(basePrice.usd * speedMultiplier * quantityMultiplier * qualityMultiplier * videoOptionsMultiplier);\n\n      res.json({\n        basePriceMXN: basePrice.mxn,\n        basePriceUSD: basePrice.usd,\n        speedMultiplier,\n        quantityMultiplier,\n        qualityMultiplier,\n        videoOptionsMultiplier,\n        selectedOptions,\n        totalMXN,\n        totalUSD\n      });\n    } catch (error) {\n      console.error(\"Error calculating price:\", error);\n      console.error(\"Request body:\", req.body);\n      res.status(500).json({ \n        message: \"Error calculating price\",\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        requestData: req.body\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10605},"server/storage.ts":{"content":"import { type Client, type InsertClient, type SiteConfig, type InsertSiteConfig, type Project, type InsertProject, type PricingConfig, type SampleVideo, type SiteContent } from \"@shared/schema\";\nimport { clients, projects, siteConfig } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Client methods\n  getClients(): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  getClientByUsername(username: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, updates: Partial<Client>): Promise<Client | undefined>;\n  deleteClient(id: string): Promise<boolean>;\n\n  // Project methods\n  getProjects(): Promise<Project[]>;\n  getProjectsByClientId(clientId: string): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Site config methods\n  getSiteConfig(): Promise<SiteConfig | undefined>;\n  createSiteConfig(config: InsertSiteConfig): Promise<SiteConfig>;\n  updateSiteConfig(updates: Partial<SiteConfig>): Promise<SiteConfig | undefined>;\n\n  // User methods (keep existing for compatibility)\n  getUser(id: string): Promise<any>;\n  getUserByUsername(username: string): Promise<any>;\n  createUser(user: any): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize default config if it doesn't exist\n    this.initializeConfig();\n  }\n\n  private async initializeConfig() {\n    const config = await this.getSiteConfig();\n    if (!config) {\n      await this.createSiteConfig({\n        whatsappNumber: \"+52 55 1234 5678\",\n        businessName: \"VideoVenta\",\n        pricing: this.getDefaultPricing(),\n        sampleVideos: this.getDefaultSampleVideos(),\n        siteContent: this.getDefaultSiteContent(),\n      });\n    }\n  }\n\n  private getDefaultPricing(): PricingConfig {\n    return {\n      narratedVideos: {\n        durations: {\n          \"5-10\": { mxn: 1600, usd: 89, label: \"5-10 minutos\" },\n          \"10-20\": { mxn: 2600, usd: 144, label: \"10-20 minutos\" },\n          \"20-30\": { mxn: 3500, usd: 194, label: \"20-30 minutos\" }\n        },\n        speeds: {\n          normal: { multiplier: 1.0, label: \"Normal (2-5 días)\" },\n          fast: { multiplier: 1.2, label: \"Rápido (2-3 días)\" },\n          express: { multiplier: 1.5, label: \"Express (1-2 días)\" }\n        },\n        quantities: {\n          15: { multiplier: 1.0, label: \"15 videos\" },\n          30: { multiplier: 1.8, label: \"30 videos\" },\n          60: { multiplier: 3.2, label: \"60 videos\" },\n          120: { multiplier: 5.8, label: \"120 videos\" }\n        },\n        videoFeatures: [\n          \"HD Horizontal (1920x1080)\",\n          \"1 Edición profesional incluida\",\n          \"Prompt personalizado\",\n          \"Calidad de imagen profesional\",\n          \"Estilo de imágenes 2.5D\",\n          \"Variedad de temas: Guerra, Peleas, Ángeles, Fantasía, Futurista, Histórico\"\n        ],\n        videoOptions: {}\n      },\n      singingPackages: {\n        basic: { mxn: 1600, usd: 89, videos: 15, label: \"Básico\" },\n        standard: { mxn: 3000, usd: 167, videos: 30, label: \"Estándar\" },\n        premium: { mxn: 5500, usd: 306, videos: 60, label: \"Premium\" },\n        business: { mxn: 9900, usd: 550, videos: 120, label: \"Empresarial\" }\n      }\n    };\n  }\n\n  private getDefaultSampleVideos(): SampleVideo[] {\n    return [\n      {\n        id: \"1\",\n        title: \"Video Corporativo\",\n        description: \"Presentaciones empresariales profesionales\",\n        thumbnail: \"https://images.unsplash.com/photo-1492691527719-9d1e07e534b4?ixlib=rb-4.0.3&w=300&h=200&fit=crop\",\n        videoUrl: \"\"\n      },\n      {\n        id: \"2\",\n        title: \"Video Promocional\",\n        description: \"Campañas publicitarias impactantes\",\n        thumbnail: \"https://images.unsplash.com/photo-1626814026160-2237a95fc5a0?ixlib=rb-4.0.3&w=300&h=200&fit=crop\",\n        videoUrl: \"\"\n      },\n      {\n        id: \"3\",\n        title: \"Video Explicativo\",\n        description: \"Tutoriales y contenido educativo\",\n        thumbnail: \"https://images.unsplash.com/photo-1598300042247-d088f8ab3a91?ixlib=rb-4.0.3&w=300&h=200&fit=crop\",\n        videoUrl: \"\"\n      }\n    ];\n  }\n\n  private getDefaultSiteContent(): SiteContent {\n    return {\n      heroTitle: \"VideoVenta\",\n      heroDescription: \"Producción de videos profesionales para tu marca\",\n      contactEmail: \"info@videoventa.com\",\n      companyDescription: \"Producción de videos profesionales\",\n      logoUrl: \"\",\n      calculatorTitle: \"Calculadora de Precios\",\n      calculatorDescription: \"Obtén una cotización instantánea personalizada para tu proyecto\",\n      backgroundImageUrl: \"\",\n      customCSS: \"\"\n    };\n  }\n\n  // Client methods\n  async getClients(): Promise<Client[]> {\n    const result = await db.select().from(clients);\n    return result;\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.id, id));\n    return client;\n  }\n\n  async getClientByUsername(username: string): Promise<Client | undefined> {\n    const [client] = await db.select().from(clients).where(eq(clients.username, username));\n    return client;\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const [client] = await db.insert(clients).values(insertClient).returning();\n    return client;\n  }\n\n  async updateClient(id: string, updates: Partial<Client>): Promise<Client | undefined> {\n    const [updated] = await db\n      .update(clients)\n      .set(updates)\n      .where(eq(clients.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteClient(id: string): Promise<boolean> {\n    const result = await db.delete(clients).where(eq(clients.id, id));\n    return true;\n  }\n\n  // Project methods\n  async getProjects(): Promise<Project[]> {\n    const result = await db.select().from(projects);\n    return result;\n  }\n\n  async getProjectsByClientId(clientId: string): Promise<Project[]> {\n    const result = await db.select().from(projects).where(eq(projects.clientId, clientId));\n    return result;\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const [project] = await db.insert(projects).values(insertProject).returning();\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project | undefined> {\n    const [updated] = await db\n      .update(projects)\n      .set(updates)\n      .where(eq(projects.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await db.delete(projects).where(eq(projects.id, id));\n    return true;\n  }\n\n  // Site config methods\n  async getSiteConfig(): Promise<SiteConfig | undefined> {\n    const [config] = await db.select().from(siteConfig);\n    return config;\n  }\n\n  async createSiteConfig(insertConfig: InsertSiteConfig): Promise<SiteConfig> {\n    const [config] = await db.insert(siteConfig).values(insertConfig).returning();\n    return config;\n  }\n\n  async updateSiteConfig(updates: Partial<SiteConfig>): Promise<SiteConfig | undefined> {\n    const configs = await db.select().from(siteConfig);\n    if (configs.length === 0) {\n      // Create if doesn't exist\n      return this.createSiteConfig({\n        ...this.getDefaultSiteContent(),\n        whatsappNumber: updates.whatsappNumber || \"+52 55 1234 5678\",\n        businessName: updates.businessName || \"VideoVenta\",\n        pricing: updates.pricing || this.getDefaultPricing(),\n        sampleVideos: updates.sampleVideos || this.getDefaultSampleVideos(),\n        siteContent: updates.siteContent || this.getDefaultSiteContent(),\n        ...updates\n      } as InsertSiteConfig);\n    }\n    \n    const [updated] = await db\n      .update(siteConfig)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(siteConfig.id, configs[0].id))\n      .returning();\n    return updated;\n  }\n\n  // User methods (keep for compatibility)\n  async getUser(id: string): Promise<any> {\n    // For now, return null as we don't have users table\n    return null;\n  }\n\n  async getUserByUsername(username: string): Promise<any> {\n    // For now, return null as we don't have users table\n    return null;\n  }\n\n  async createUser(user: any): Promise<any> {\n    // For now, return the user as-is\n    return user;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":8803},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  username: text(\"username\").notNull().unique(),\n  projects: jsonb(\"projects\").default(sql`'[]'`),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const siteConfig = pgTable(\"site_config\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  whatsappNumber: text(\"whatsapp_number\").notNull(),\n  businessName: text(\"business_name\").notNull(),\n  pricing: jsonb(\"pricing\").notNull(),\n  sampleVideos: jsonb(\"sample_videos\").default(sql`'[]'`),\n  siteContent: jsonb(\"site_content\").default(sql`'{}'`),\n  messagingConfig: jsonb(\"messaging_config\").default(sql`'{}'`),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(),\n  duration: text(\"duration\"),\n  quantity: integer(\"quantity\"),\n  status: text(\"status\").default(\"pending\"),\n  downloadLinks: jsonb(\"download_links\").default(sql`'[]'`),\n  deliveryDate: timestamp(\"delivery_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSiteConfigSchema = createInsertSchema(siteConfig).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\n\nexport type SiteConfig = typeof siteConfig.$inferSelect;\nexport type InsertSiteConfig = z.infer<typeof insertSiteConfigSchema>;\n\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\n\n// Pricing structure type\nexport type PricingConfig = {\n  narratedVideos: {\n    durations: {\n      [key: string]: { mxn: number; usd: number; label: string };\n    };\n    speeds: {\n      [key: string]: { multiplier: number; label: string };\n    };\n    quantities: {\n      [key: string]: { multiplier: number; label: string };\n    };\n    videoOptions: {\n      [key: string]: VideoOption;\n    };\n  };\n  singingPackages: {\n    [key: string]: { mxn: number; usd: number; videos: number; label: string };\n  };\n};\n\n// Video configuration options\nexport type VideoOption = {\n  id: string;\n  name: string;\n  description: string;\n  options: {\n    [key: string]: {\n      label: string;\n      priceModifier: number; // multiplier for price\n      available: boolean;\n    };\n  };\n};\n\n// Video quality and style options\nexport type VideoOptionsConfig = {\n  quality: VideoOption;\n  style: VideoOption;\n  storyTheme: VideoOption;\n  editingLevel: VideoOption;\n  customPrompt: VideoOption;\n};\n\n// Sample video type\nexport type SampleVideo = {\n  id: string;\n  title: string;\n  description: string;\n  thumbnail: string;\n  videoUrl: string;\n};\n\n// Site content type\nexport type SiteContent = {\n  heroTitle: string;\n  heroDescription: string;\n  contactEmail: string;\n  companyDescription: string;\n  logoUrl?: string;\n  calculatorTitle?: string;\n  calculatorDescription?: string;\n  backgroundImageUrl?: string;\n  customCSS?: string;\n  trustIndicators?: {\n    projects?: string;\n    rating?: string;\n    delivery?: string;\n  };\n};\n\n// Messaging configuration type\nexport type MessagingConfig = {\n  whatsappApiEnabled?: boolean;\n  whatsappApiToken?: string;\n  whatsappBusinessId?: string;\n  messengerEnabled?: boolean;\n  messengerPageId?: string;\n  messengerAccessToken?: string;\n};\n\n// Download link type\nexport type DownloadLink = {\n  id: string;\n  title: string;\n  url: string;\n  type: 'video' | 'document' | 'image';\n  size?: string;\n};\n","size_bytes":4129},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ConfigProvider } from \"@/contexts/ConfigContext\";\nimport Home from \"@/pages/home\";\nimport Admin from \"@/pages/admin\";\nimport Client from \"@/pages/client\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/admin\" component={Admin} />\n      <Route path=\"/client/:username\" component={Client} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ConfigProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ConfigProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":993},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 8%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(0, 0%, 12%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(0, 0%, 12%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(16, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(39, 100%, 50%);\n  --secondary-foreground: hsl(0, 0%, 12%);\n  --muted: hsl(0, 0%, 20%);\n  --muted-foreground: hsl(0, 0%, 70%);\n  --accent: hsl(25, 100%, 60%);\n  --accent-foreground: hsl(0, 0%, 12%);\n  --destructive: hsl(0, 85%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 25%);\n  --input: hsl(0, 0%, 18%);\n  --ring: hsl(16, 100%, 50%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 12%);\n  --sidebar-foreground: hsl(0, 0%, 95%);\n  --sidebar-primary: hsl(16, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(25, 100%, 60%);\n  --sidebar-accent-foreground: hsl(0, 0%, 12%);\n  --sidebar-border: hsl(0, 0%, 25%);\n  --sidebar-ring: hsl(16, 100%, 50%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(16, 100%, 50% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(16, 100%, 50% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(16, 100%, 50% / 0.00), 0px 1px 2px -1px hsl(16, 100%, 50% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(16, 100%, 50% / 0.00), 0px 1px 2px -1px hsl(16, 100%, 50% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(16, 100%, 50% / 0.00), 0px 2px 4px -1px hsl(16, 100%, 50% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(16, 100%, 50% / 0.00), 0px 4px 6px -1px hsl(16, 100%, 50% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(16, 100%, 50% / 0.00), 0px 8px 10px -1px hsl(16, 100%, 50% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(16, 100%, 50% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 4%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(0, 0%, 8%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(0, 0%, 4%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(16, 100%, 55%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(39, 100%, 55%);\n  --secondary-foreground: hsl(0, 0%, 8%);\n  --muted: hsl(0, 0%, 15%);\n  --muted-foreground: hsl(0, 0%, 75%);\n  --accent: hsl(25, 100%, 65%);\n  --accent-foreground: hsl(0, 0%, 8%);\n  --destructive: hsl(0, 90%, 65%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(0, 0%, 20%);\n  --input: hsl(0, 0%, 12%);\n  --ring: hsl(16, 100%, 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .fire-gradient {\n    background: linear-gradient(135deg, #FF4500 0%, #FF6B00 50%, #FFB800 100%);\n  }\n\n  .fire-text {\n    background: linear-gradient(135deg, #FF4500 0%, #FF6B00 50%, #FFB800 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .glass-card {\n    background: rgba(30, 30, 30, 0.8);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 107, 0, 0.2);\n  }\n\n  .fire-shadow {\n    box-shadow: 0 10px 30px rgba(255, 69, 0, 0.3);\n  }\n\n  .fire-border {\n    border: 2px solid transparent;\n    background: linear-gradient(rgba(30, 30, 30, 0.9), rgba(30, 30, 30, 0.9)) padding-box,\n                linear-gradient(135deg, #FF4500, #FF6B00, #FFB800) border-box;\n  }\n\n  .fire-particles {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    pointer-events: none;\n  }\n\n  .fire-particle {\n    position: absolute;\n    width: 4px;\n    height: 4px;\n    background: radial-gradient(circle, #FFB800 0%, #FF6B00 70%, transparent 100%);\n    border-radius: 50%;\n    animation: float 6s ease-in-out infinite;\n  }\n}\n\n@layer utilities {\n  .animate-fire-flicker {\n    animation: fire-flicker 2s ease-in-out infinite alternate;\n  }\n\n  .animate-glow-pulse {\n    animation: glow-pulse 3s ease-in-out infinite;\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  @keyframes fire-flicker {\n    0% { \n      opacity: 0.9; \n      transform: scale(1) rotate(0deg); \n    }\n    100% { \n      opacity: 1; \n      transform: scale(1.05) rotate(1deg); \n    }\n  }\n\n  @keyframes glow-pulse {\n    0%, 100% { \n      box-shadow: 0 0 20px rgba(255, 69, 0, 0.5); \n    }\n    50% { \n      box-shadow: 0 0 40px rgba(255, 140, 0, 0.8); \n    }\n  }\n\n  @keyframes float {\n    0%, 100% { \n      transform: translateY(0px); \n    }\n    50% { \n      transform: translateY(-10px); \n    }\n  }\n\n  @keyframes gradient {\n    0%, 100% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n\n  @keyframes fade-in-up {\n    0% {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes fade-in {\n    0% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n\n  @keyframes scroll-down {\n    0% {\n      transform: translateY(0);\n      opacity: 0;\n    }\n    50% {\n      opacity: 1;\n    }\n    100% {\n      transform: translateY(10px);\n      opacity: 0;\n    }\n  }\n\n  @keyframes text-gradient {\n    0%, 100% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n\n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 0 0 rgba(251, 146, 60, 0.4);\n    }\n    50% {\n      box-shadow: 0 0 0 10px rgba(251, 146, 60, 0);\n    }\n  }\n\n  .animate-gradient {\n    animation: gradient 8s ease infinite;\n  }\n\n  .animate-text-gradient {\n    animation: text-gradient 5s ease infinite;\n  }\n\n  .animate-fade-in-up {\n    animation: fade-in-up 0.8s ease-out forwards;\n  }\n\n  .animate-fade-in {\n    animation: fade-in 1s ease-out forwards;\n  }\n\n  .animate-scroll-down {\n    animation: scroll-down 2s ease-in-out infinite;\n  }\n\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  .bg-size-300 {\n    background-size: 300%;\n  }\n}\n","size_bytes":6387},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminAuth.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useLocation } from 'wouter';\nimport { X } from 'lucide-react';\n\ninterface AdminAuthProps {\n  onClose: () => void;\n}\n\nexport default function AdminAuth({ onClose }: AdminAuthProps) {\n  const [password, setPassword] = React.useState('');\n  const [, setLocation] = useLocation();\n\n  const loginMutation = useMutation({\n    mutationFn: async (password: string) => {\n      const response = await apiRequest('POST', '/api/admin/login', { password });\n      return response.json();\n    },\n    onSuccess: () => {\n      onClose();\n      setLocation('/admin');\n    },\n    onError: () => {\n      alert('Contraseña incorrecta');\n      setPassword('');\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(password);\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <Card className=\"glass-card fire-border w-full max-w-md\">\n        <CardContent className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold fire-text\">Acceso Administrativo</h2>\n            <Button \n              variant=\"ghost\" \n              size=\"icon\" \n              onClick={onClose}\n              data-testid=\"button-close-auth\"\n            >\n              <X size={20} />\n            </Button>\n          </div>\n          <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-admin-login\">\n            <div>\n              <Label htmlFor=\"admin-password\">Contraseña de Administrador</Label>\n              <Input\n                id=\"admin-password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Ingresa la contraseña\"\n                className=\"bg-input border-border focus:border-primary\"\n                required\n                data-testid=\"input-admin-password\"\n              />\n            </div>\n            <div className=\"flex space-x-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-auth\"\n              >\n                Cancelar\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"flex-1 fire-gradient text-white font-semibold hover:opacity-90\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-submit-auth\"\n              >\n                {loginMutation.isPending ? 'Verificando...' : 'Ingresar'}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3103},"client/src/components/AdminPanel.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Eye, Plus, Edit, Trash2, Users, Video, DollarSign, Settings, LogOut, Package } from 'lucide-react';\nimport { useLocation } from 'wouter';\nimport { useConfig } from '@/contexts/ConfigContext';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { ClientWithProjects } from '@shared/schema';\nimport AdminLogin from './AdminLogin';\nimport ProjectManager from './ProjectManager';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function AdminPanel() {\n  const [, setLocation] = useLocation();\n  const { config, refetchConfig } = useConfig();\n  const [showAddClient, setShowAddClient] = React.useState(false);\n  const [showEditClient, setShowEditClient] = React.useState(false);\n  const [editingClient, setEditingClient] = React.useState<any>(null);\n  const [selectedClientForProjects, setSelectedClientForProjects] = React.useState<any>(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [checkingAuth, setCheckingAuth] = useState(true);\n  const { toast } = useToast();\n\n  // Check authentication status\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n\n  const checkAuthStatus = async () => {\n    try {\n      const response = await fetch('/api/admin/check-auth', {\n        credentials: 'include',\n      });\n      const data = await response.json();\n      setIsAuthenticated(data.isAuthenticated);\n    } catch (error) {\n      setIsAuthenticated(false);\n    } finally {\n      setCheckingAuth(false);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await fetch('/api/admin/logout', {\n        method: 'POST',\n        credentials: 'include',\n      });\n      setIsAuthenticated(false);\n      toast({\n        title: \"Sesión Cerrada\",\n        description: \"Ha cerrado sesión exitosamente\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo cerrar sesión\",\n        variant: \"destructive\",\n      });\n    }\n  };\n  \n  const { data: clients = [] } = useQuery({\n    queryKey: ['/api/clients'],\n    queryFn: async () => {\n      const response = await fetch('/api/clients');\n      if (!response.ok) throw new Error('Failed to fetch clients');\n      return response.json() as Promise<ClientWithProjects[]>;\n    },\n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/config', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      refetchConfig();\n      queryClient.invalidateQueries({ queryKey: ['/api/config'] });\n    },\n  });\n\n  const createClientMutation = useMutation({\n    mutationFn: async (client: any) => {\n      const response = await apiRequest('POST', '/api/clients', client);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      setShowAddClient(false);\n    },\n  });\n\n  const updateClientMutation = useMutation({\n    mutationFn: async ({ id, ...updates }: any) => {\n      const response = await apiRequest('PUT', `/api/clients/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      setShowEditClient(false);\n      setEditingClient(null);\n    },\n  });\n\n  const handleCreateClient = (formData: FormData) => {\n    const client = {\n      name: formData.get('name'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n      username: formData.get('username'),\n    };\n    createClientMutation.mutate(client);\n  };\n\n  const handleEditClient = (client: any) => {\n    setEditingClient(client);\n    setShowEditClient(true);\n  };\n\n  const handleUpdateClient = (formData: FormData) => {\n    updateClientMutation.mutate({\n      id: editingClient.id,\n      name: formData.get('name'),\n      email: formData.get('email'),\n      phone: formData.get('phone'),\n    });\n  };\n\n  const handleSiteContentUpdate = () => {\n    const heroTitle = (document.getElementById('hero-title') as HTMLInputElement)?.value;\n    const heroDescription = (document.getElementById('hero-description') as HTMLTextAreaElement)?.value;\n    const calculatorTitle = (document.getElementById('calculator-title') as HTMLInputElement)?.value;\n    const calculatorDescription = (document.getElementById('calculator-description') as HTMLTextAreaElement)?.value;\n    const contactEmail = (document.getElementById('contact-email') as HTMLInputElement)?.value;\n    const companyDescription = (document.getElementById('company-description') as HTMLTextAreaElement)?.value;\n    const logoUrl = (document.getElementById('logo-url') as HTMLInputElement)?.value;\n    const backgroundImageUrl = (document.getElementById('background-image-url') as HTMLInputElement)?.value;\n    const customCSS = (document.getElementById('custom-css') as HTMLTextAreaElement)?.value;\n    const trustProjects = (document.getElementById('trust-projects') as HTMLInputElement)?.value;\n    const trustRating = (document.getElementById('trust-rating') as HTMLInputElement)?.value;\n    const trustDelivery = (document.getElementById('trust-delivery') as HTMLInputElement)?.value;\n\n    updateConfigMutation.mutate({\n      ...config,\n      siteContent: {\n        ...config?.siteContent,\n        heroTitle,\n        heroDescription,\n        calculatorTitle,\n        calculatorDescription,\n        contactEmail,\n        companyDescription,\n        logoUrl,\n        backgroundImageUrl,\n        customCSS,\n        trustIndicators: {\n          projects: trustProjects,\n          rating: trustRating,\n          delivery: trustDelivery,\n        },\n      },\n    });\n  };\n\n  const handleWhatsAppConfigSave = () => {\n    const whatsappNumber = (document.getElementById('whatsapp-config') as HTMLInputElement)?.value;\n    const businessName = (document.getElementById('business-name-config') as HTMLInputElement)?.value;\n    const whatsappApiKey = (document.getElementById('whatsapp-api-key') as HTMLInputElement)?.value;\n    const whatsappPhoneId = (document.getElementById('whatsapp-phone-id') as HTMLInputElement)?.value;\n\n    updateConfigMutation.mutate({\n      ...config,\n      whatsappNumber,\n      businessName,\n      messagingApis: {\n        ...config?.messagingApis,\n        whatsappApiKey,\n        whatsappPhoneId,\n      },\n    });\n  };\n\n  const handlePricingUpdate = (key: string, field: string, value: number) => {\n    if (!config?.pricing) return;\n\n    const updatedPricing = { ...config.pricing } as any;\n    const [section, item] = key.split('-');\n    \n    if (section === 'narratedDuration' && item) {\n      if (!updatedPricing.narratedVideos) updatedPricing.narratedVideos = {};\n      if (!updatedPricing.narratedVideos.durations) updatedPricing.narratedVideos.durations = {};\n      if (!updatedPricing.narratedVideos.durations[item]) {\n        updatedPricing.narratedVideos.durations[item] = { mxn: 0, usd: 0, label: '' };\n      }\n      updatedPricing.narratedVideos.durations[item][field as 'mxn' | 'usd'] = value;\n    } else if (section === 'singingPackage' && item) {\n      if (!updatedPricing.singingPackages) updatedPricing.singingPackages = {};\n      if (!updatedPricing.singingPackages[item]) {\n        updatedPricing.singingPackages[item] = { mxn: 0, usd: 0, videos: 0, label: '' };\n      }\n      updatedPricing.singingPackages[item][field as 'mxn' | 'usd' | 'videos'] = value;\n    } else if (section === 'speed' && item) {\n      if (!updatedPricing.narratedVideos) updatedPricing.narratedVideos = {};\n      if (!updatedPricing.narratedVideos.speeds) updatedPricing.narratedVideos.speeds = {};\n      if (!updatedPricing.narratedVideos.speeds[item]) {\n        updatedPricing.narratedVideos.speeds[item] = { multiplier: 1, label: '' };\n      }\n      updatedPricing.narratedVideos.speeds[item]['multiplier'] = value;\n    } else if (section === 'quantity' && item) {\n      if (!updatedPricing.narratedVideos) updatedPricing.narratedVideos = {};\n      if (!updatedPricing.narratedVideos.quantities) updatedPricing.narratedVideos.quantities = {};\n      if (!updatedPricing.narratedVideos.quantities[item]) {\n        updatedPricing.narratedVideos.quantities[item] = { multiplier: 1, label: '' };\n      }\n      updatedPricing.narratedVideos.quantities[item]['multiplier'] = value;\n    }\n\n    updateConfigMutation.mutate({ pricing: updatedPricing });\n  };\n\n  const generateUsername = (name: string) => {\n    return name\n      .toLowerCase()\n      .replace(/[^a-z0-9\\s]/g, '')\n      .replace(/\\s+/g, '-')\n      .replace(/-+/g, '-')\n      .replace(/^-|-$/g, '');\n  };\n\n  const renderDashboard = () => (\n    <div className=\"space-y-6\">\n      <div className=\"grid md:grid-cols-3 gap-6\">\n        <Card className=\"glass-card fire-border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Total Clientes</p>\n              <p className=\"text-2xl font-bold fire-text\" data-testid=\"stat-total-clients\">{clients.length}</p>\n            </div>\n            <div className=\"fire-gradient w-12 h-12 rounded-lg flex items-center justify-center\">\n              <Users className=\"text-white\" size={24} />\n            </div>\n          </div>\n        </Card>\n        <Card className=\"glass-card fire-border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Proyectos Activos</p>\n              <p className=\"text-2xl font-bold fire-text\" data-testid=\"stat-active-projects\">\n                {clients.reduce((acc, client) => acc + (client.projects?.filter(p => p.status === 'in-progress').length || 0), 0)}\n              </p>\n            </div>\n            <div className=\"fire-gradient w-12 h-12 rounded-lg flex items-center justify-center\">\n              <Video className=\"text-white\" size={24} />\n            </div>\n          </div>\n        </Card>\n        <Card className=\"glass-card fire-border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-muted-foreground\">Videos Completados</p>\n              <p className=\"text-2xl font-bold fire-text\" data-testid=\"stat-completed-videos\">\n                {clients.reduce((acc, client) => acc + (client.projects?.filter(p => p.status === 'delivered').length || 0), 0)}\n              </p>\n            </div>\n            <div className=\"fire-gradient w-12 h-12 rounded-lg flex items-center justify-center\">\n              <DollarSign className=\"text-white\" size={24} />\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n\n  const renderSettings = () => (\n    <div className=\"space-y-6\">\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">Configuración de WhatsApp Business API</h3>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <Label htmlFor=\"whatsapp-config\">Número de WhatsApp</Label>\n            <Input\n              id=\"whatsapp-config\"\n              type=\"tel\"\n              placeholder=\"+52 55 1234 5678\"\n              defaultValue={config?.whatsappNumber}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-whatsapp-number\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"business-name-config\">Nombre del Negocio</Label>\n            <Input\n              id=\"business-name-config\"\n              type=\"text\"\n              placeholder=\"VideoVenta System\"\n              defaultValue={config?.businessName}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-business-name\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"whatsapp-api-key\">WhatsApp API Token</Label>\n            <Input\n              id=\"whatsapp-api-key\"\n              type=\"password\"\n              placeholder=\"EAAxxxxxxxxxxxxxx...\"\n              defaultValue={config?.messagingApis?.whatsappApiKey}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-whatsapp-api-key\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"whatsapp-phone-id\">Phone Number ID</Label>\n            <Input\n              id=\"whatsapp-phone-id\"\n              type=\"text\"\n              placeholder=\"1234567890123456\"\n              defaultValue={config?.messagingApis?.whatsappPhoneId}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-whatsapp-phone-id\"\n            />\n          </div>\n        </div>\n        <Button \n          onClick={handleWhatsAppConfigSave}\n          className=\"fire-gradient text-white font-semibold hover:opacity-90 mt-4\"\n          disabled={updateConfigMutation.isPending}\n          data-testid=\"button-update-whatsapp\"\n        >\n          {updateConfigMutation.isPending ? 'Guardando...' : 'Actualizar WhatsApp'}\n        </Button>\n      </Card>\n\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">Configuración de Messenger API</h3>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <Label htmlFor=\"messenger-page-id\">Facebook Page ID</Label>\n            <Input\n              id=\"messenger-page-id\"\n              type=\"text\"\n              placeholder=\"1234567890\"\n              defaultValue={config?.messagingApis?.messengerPageId}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-messenger-page-id\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"messenger-app-id\">Facebook App ID</Label>\n            <Input\n              id=\"messenger-app-id\"\n              type=\"text\"\n              placeholder=\"9876543210\"\n              defaultValue={config?.messagingApis?.messengerAppId}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-messenger-app-id\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"messenger-api-key\">Messenger API Token</Label>\n            <Input\n              id=\"messenger-api-key\"\n              type=\"password\"\n              placeholder=\"EAAxxxxxxxxxxxxxx...\"\n              defaultValue={config?.messagingApis?.messengerApiKey}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-messenger-api-key\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"messenger-webhook-verify\">Webhook Verify Token</Label>\n            <Input\n              id=\"messenger-webhook-verify\"\n              type=\"text\"\n              placeholder=\"my-verify-token-123\"\n              defaultValue={config?.messagingApis?.messengerWebhookVerify}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-messenger-webhook-verify\"\n            />\n          </div>\n        </div>\n        <Button \n          onClick={() => {\n            const messengerPageId = (document.getElementById('messenger-page-id') as HTMLInputElement)?.value;\n            const messengerAppId = (document.getElementById('messenger-app-id') as HTMLInputElement)?.value;\n            const messengerApiKey = (document.getElementById('messenger-api-key') as HTMLInputElement)?.value;\n            const messengerWebhookVerify = (document.getElementById('messenger-webhook-verify') as HTMLInputElement)?.value;\n\n            updateConfigMutation.mutate({\n              ...config,\n              messagingApis: {\n                ...config?.messagingApis,\n                messengerPageId,\n                messengerAppId,\n                messengerApiKey,\n                messengerWebhookVerify,\n              },\n            });\n          }}\n          className=\"fire-gradient text-white font-semibold hover:opacity-90 mt-4\"\n          disabled={updateConfigMutation.isPending}\n          data-testid=\"button-update-messenger\"\n        >\n          {updateConfigMutation.isPending ? 'Guardando...' : 'Actualizar Messenger'}\n        </Button>\n      </Card>\n\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">Logo y Fondo</h3>\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          <div>\n            <Label htmlFor=\"logo-url\">URL del Logo</Label>\n            <Input\n              id=\"logo-url\"\n              type=\"url\"\n              placeholder=\"https://ejemplo.com/logo.png\"\n              defaultValue={config?.siteContent?.logoUrl}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-logo-url\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"background-image-url\">URL de Imagen de Fondo</Label>\n            <Input\n              id=\"background-image-url\"\n              type=\"url\"\n              placeholder=\"https://ejemplo.com/fondo.jpg\"\n              defaultValue={config?.siteContent?.backgroundImageUrl}\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-background-url\"\n            />\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">CSS Personalizado</h3>\n        <div>\n          <Label htmlFor=\"custom-css\">Estilos CSS Personalizados</Label>\n          <Textarea\n            id=\"custom-css\"\n            rows={10}\n            placeholder=\".mi-clase { color: red; }\"\n            defaultValue={config?.siteContent?.customCSS}\n            className=\"bg-input border-border focus:border-primary font-mono text-sm\"\n            data-testid=\"textarea-custom-css\"\n          />\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderContent = () => (\n    <div className=\"space-y-6\">\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">Sección Hero</h3>\n        <div>\n          <Label htmlFor=\"hero-title\">Título Principal</Label>\n          <Input\n            id=\"hero-title\"\n            type=\"text\"\n            defaultValue={config?.siteContent?.heroTitle}\n            placeholder=\"Videos Profesionales que Cuentan Tu Historia\"\n            className=\"bg-input border-border focus:border-primary mb-4\"\n            data-testid=\"input-hero-title\"\n          />\n          <Label htmlFor=\"hero-description\">Descripción Hero</Label>\n          <Textarea\n            id=\"hero-description\"\n            rows={3}\n            defaultValue={config?.siteContent?.heroDescription}\n            placeholder=\"Creamos contenido audiovisual de alta calidad...\"\n            className=\"bg-input border-border focus:border-primary\"\n            data-testid=\"textarea-hero-description\"\n          />\n        </div>\n        <Button \n          onClick={handleSiteContentUpdate}\n          className=\"fire-gradient text-white font-semibold hover:opacity-90 mt-4\"\n          disabled={updateConfigMutation.isPending}\n          data-testid=\"button-update-hero\"\n        >\n          {updateConfigMutation.isPending ? 'Guardando...' : 'Guardar Sección Hero'}\n        </Button>\n      </Card>\n\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">Sección Calculadora</h3>\n        <div>\n          <Label htmlFor=\"calculator-title\">Título de Calculadora</Label>\n          <Input\n            id=\"calculator-title\"\n            type=\"text\"\n            defaultValue={config?.siteContent?.calculatorTitle}\n            placeholder=\"Calcula tu Inversión\"\n            className=\"bg-input border-border focus:border-primary mb-4\"\n            data-testid=\"input-calculator-title\"\n          />\n          <Label htmlFor=\"calculator-description\">Descripción de Calculadora</Label>\n          <Textarea\n            id=\"calculator-description\"\n            rows={3}\n            defaultValue={config?.siteContent?.calculatorDescription}\n            placeholder=\"Obtén un presupuesto instantáneo...\"\n            className=\"bg-input border-border focus:border-primary\"\n            data-testid=\"textarea-calculator-description\"\n          />\n        </div>\n        <Button \n          onClick={handleSiteContentUpdate}\n          className=\"fire-gradient text-white font-semibold hover:opacity-90 mt-4\"\n          disabled={updateConfigMutation.isPending}\n          data-testid=\"button-update-calculator\"\n        >\n          {updateConfigMutation.isPending ? 'Guardando...' : 'Guardar Calculadora'}\n        </Button>\n      </Card>\n\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">Información de Contacto</h3>\n        <div>\n          <Label htmlFor=\"contact-email\">Email de Contacto</Label>\n          <Input\n            id=\"contact-email\"\n            type=\"email\"\n            defaultValue={config?.siteContent?.contactEmail}\n            placeholder=\"info@videoventa.com\"\n            className=\"bg-input border-border focus:border-primary mb-4\"\n            data-testid=\"input-contact-email\"\n          />\n          <Label htmlFor=\"company-description\">Descripción de la Empresa</Label>\n          <Textarea\n            id=\"company-description\"\n            rows={3}\n            defaultValue={config?.siteContent?.companyDescription}\n            placeholder=\"Creamos contenido audiovisual profesional...\"\n            className=\"bg-input border-border focus:border-primary\"\n            data-testid=\"textarea-company-description\"\n          />\n        </div>\n        <Button \n          onClick={handleSiteContentUpdate}\n          className=\"fire-gradient text-white font-semibold hover:opacity-90 mt-4\"\n          disabled={updateConfigMutation.isPending}\n          data-testid=\"button-update-contact\"\n        >\n          {updateConfigMutation.isPending ? 'Guardando...' : 'Guardar Información'}\n        </Button>\n      </Card>\n\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">Indicadores de Confianza</h3>\n        <div className=\"grid md:grid-cols-3 gap-4\">\n          <div>\n            <Label htmlFor=\"trust-projects\">Proyectos Completados</Label>\n            <Input\n              id=\"trust-projects\"\n              type=\"text\"\n              defaultValue={config?.siteContent?.trustIndicators?.projects}\n              placeholder=\"100+ Proyectos\"\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-trust-projects\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"trust-rating\">Calificación</Label>\n            <Input\n              id=\"trust-rating\"\n              type=\"text\"\n              defaultValue={config?.siteContent?.trustIndicators?.rating}\n              placeholder=\"5.0 Calificación\"\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-trust-rating\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"trust-delivery\">Entrega</Label>\n            <Input\n              id=\"trust-delivery\"\n              type=\"text\"\n              defaultValue={config?.siteContent?.trustIndicators?.delivery}\n              placeholder=\"Entrega Rápida\"\n              className=\"bg-input border-border focus:border-primary\"\n              data-testid=\"input-trust-delivery\"\n            />\n          </div>\n        </div>\n        <Button \n          onClick={handleSiteContentUpdate}\n          className=\"fire-gradient text-white font-semibold hover:opacity-90 mt-4\"\n          disabled={updateConfigMutation.isPending}\n          data-testid=\"button-update-trust\"\n        >\n          {updateConfigMutation.isPending ? 'Guardando...' : 'Guardar Indicadores'}\n        </Button>\n      </Card>\n\n      <Card className=\"glass-card fire-border p-6\">\n        <h3 className=\"text-xl font-bold mb-4 fire-text\">Videos de Muestra</h3>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {config?.sampleVideos?.map((video: any, index: number) => (\n            <div key={video.id || index} className=\"border border-border rounded-lg p-4\">\n              <div className=\"aspect-video bg-muted rounded-lg mb-4 relative\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-red-900/50 to-orange-900/50 rounded-lg\"></div>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <Video className=\"text-white\" size={32} />\n                </div>\n              </div>\n              <div className=\"space-y-3\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Título del video\"\n                  defaultValue={video.title}\n                  className=\"bg-input border-border focus:border-primary\"\n                  data-testid={`input-video-title-${index}`}\n                />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Descripción\"\n                  defaultValue={video.description}\n                  className=\"bg-input border-border focus:border-primary\"\n                  data-testid={`input-video-description-${index}`}\n                />\n                <Input\n                  type=\"url\"\n                  placeholder=\"URL de la imagen\"\n                  defaultValue={video.thumbnail}\n                  className=\"bg-input border-border focus:border-primary\"\n                  data-testid={`input-video-thumbnail-${index}`}\n                />\n                <Button \n                  className=\"w-full fire-gradient text-white font-semibold hover:opacity-90\"\n                  data-testid={`button-update-video-${index}`}\n                >\n                  Actualizar\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n    </div>\n  );\n\n  const renderClients = () => (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold fire-text\">Gestión de Clientes</h2>\n        <Dialog open={showAddClient} onOpenChange={setShowAddClient}>\n          <DialogTrigger asChild>\n            <Button className=\"fire-gradient text-white font-semibold hover:opacity-90\" data-testid=\"button-add-client\">\n              <Plus className=\"mr-2\" size={16} />\n              Agregar Cliente\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"glass-card fire-border max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"fire-text\">Agregar Nuevo Cliente</DialogTitle>\n            </DialogHeader>\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                handleCreateClient(formData);\n              }}\n              className=\"space-y-6\"\n              data-testid=\"form-add-client\"\n            >\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"client-name\">Nombre de la Empresa</Label>\n                  <Input\n                    id=\"client-name\"\n                    name=\"name\"\n                    placeholder=\"ABC Corporation\"\n                    className=\"bg-input border-border focus:border-primary\"\n                    required\n                    data-testid=\"input-client-name\"\n                    onChange={(e) => {\n                      const usernameInput = document.getElementById('client-username') as HTMLInputElement;\n                      if (usernameInput) {\n                        usernameInput.value = generateUsername(e.target.value);\n                      }\n                    }}\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"client-email\">Email de Contacto</Label>\n                  <Input\n                    id=\"client-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"contacto@abccorp.com\"\n                    className=\"bg-input border-border focus:border-primary\"\n                    required\n                    data-testid=\"input-client-email\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"client-phone\">Teléfono</Label>\n                  <Input\n                    id=\"client-phone\"\n                    name=\"phone\"\n                    type=\"tel\"\n                    placeholder=\"+52 55 1234 5678\"\n                    className=\"bg-input border-border focus:border-primary\"\n                    data-testid=\"input-client-phone\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"client-username\">Username (Generado automáticamente)</Label>\n                  <Input\n                    id=\"client-username\"\n                    name=\"username\"\n                    placeholder=\"abc-corporation\"\n                    className=\"bg-muted border-border\"\n                    readOnly\n                    data-testid=\"input-client-username\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex space-x-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setShowAddClient(false)}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-add-client\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1 fire-gradient text-white font-semibold hover:opacity-90\"\n                  disabled={createClientMutation.isPending}\n                  data-testid=\"button-submit-add-client\"\n                >\n                  {createClientMutation.isPending ? 'Creando...' : 'Crear Cliente'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Client Dialog */}\n        <Dialog open={showEditClient} onOpenChange={setShowEditClient}>\n          <DialogContent className=\"glass-card fire-border max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"fire-text\">Editar Cliente</DialogTitle>\n            </DialogHeader>\n            <form\n              onSubmit={(e) => {\n                e.preventDefault();\n                const formData = new FormData(e.currentTarget);\n                handleUpdateClient(formData);\n              }}\n              className=\"space-y-6\"\n              data-testid=\"form-edit-client\"\n            >\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"edit-client-name\">Nombre de la Empresa</Label>\n                  <Input\n                    id=\"edit-client-name\"\n                    name=\"name\"\n                    defaultValue={editingClient?.name}\n                    placeholder=\"ABC Corporation\"\n                    className=\"bg-input border-border focus:border-primary\"\n                    required\n                    data-testid=\"input-edit-client-name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-client-email\">Email de Contacto</Label>\n                  <Input\n                    id=\"edit-client-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    defaultValue={editingClient?.email}\n                    placeholder=\"contacto@abccorp.com\"\n                    className=\"bg-input border-border focus:border-primary\"\n                    required\n                    data-testid=\"input-edit-client-email\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"edit-client-phone\">Teléfono</Label>\n                  <Input\n                    id=\"edit-client-phone\"\n                    name=\"phone\"\n                    type=\"tel\"\n                    defaultValue={editingClient?.phone}\n                    placeholder=\"+52 55 1234 5678\"\n                    className=\"bg-input border-border focus:border-primary\"\n                    data-testid=\"input-edit-client-phone\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-client-username\">Username</Label>\n                  <Input\n                    id=\"edit-client-username\"\n                    name=\"username\"\n                    value={editingClient?.username}\n                    className=\"bg-muted border-border\"\n                    readOnly\n                    disabled\n                    data-testid=\"input-edit-client-username\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex space-x-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setShowEditClient(false);\n                    setEditingClient(null);\n                  }}\n                  className=\"flex-1\"\n                  data-testid=\"button-cancel-edit-client\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  className=\"flex-1 fire-gradient text-white font-semibold hover:opacity-90\"\n                  disabled={updateClientMutation.isPending}\n                  data-testid=\"button-submit-edit-client\"\n                >\n                  {updateClientMutation.isPending ? 'Guardando...' : 'Guardar Cambios'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <Card className=\"glass-card fire-border p-6\">\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Cliente</TableHead>\n                <TableHead>Email</TableHead>\n                <TableHead>Teléfono</TableHead>\n                <TableHead>Username</TableHead>\n                <TableHead>Proyectos</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {clients.map((client) => (\n                <TableRow key={client.id} data-testid={`row-client-${client.id}`}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"fire-gradient w-10 h-10 rounded-lg flex items-center justify-center\">\n                        <span className=\"text-white font-semibold\">\n                          {client.name.substring(0, 2).toUpperCase()}\n                        </span>\n                      </div>\n                      <div>\n                        <div className=\"font-medium\">{client.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{client.username}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell className=\"text-muted-foreground\">{client.email}</TableCell>\n                  <TableCell className=\"text-muted-foreground\">{client.phone}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">{client.username}</Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge className=\"bg-primary/20 text-primary\">\n                      {client.projects?.length || 0} proyectos\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button \n                        size=\"icon\" \n                        variant=\"ghost\" \n                        onClick={() => setLocation(`/client/${client.username}`)}\n                        data-testid={`button-view-client-${client.id}`}\n                        title=\"Ver página del cliente\"\n                      >\n                        <Eye size={16} />\n                      </Button>\n                      <Button \n                        size=\"icon\" \n                        variant=\"ghost\" \n                        onClick={() => setSelectedClientForProjects(client)}\n                        data-testid={`button-projects-client-${client.id}`}\n                        title=\"Gestionar proyectos\"\n                      >\n                        <Package size={16} />\n                      </Button>\n                      <Button \n                        size=\"icon\" \n                        variant=\"ghost\" \n                        onClick={() => handleEditClient(client)}\n                        data-testid={`button-edit-client-${client.id}`}\n                        title=\"Editar cliente\"\n                      >\n                        <Edit size={16} />\n                      </Button>\n                      <Button \n                        size=\"icon\" \n                        variant=\"ghost\" \n                        className=\"text-destructive\" \n                        data-testid={`button-delete-client-${client.id}`}\n                        title=\"Eliminar cliente\"\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </div>\n      </Card>\n\n      {/* Project Manager Section */}\n      {selectedClientForProjects && (\n        <div className=\"mt-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-xl font-bold fire-text\">Gestión de Proyectos</h3>\n            <Button\n              variant=\"outline\"\n              onClick={() => setSelectedClientForProjects(null)}\n              data-testid=\"button-close-projects\"\n            >\n              Cerrar\n            </Button>\n          </div>\n          <ProjectManager\n            clientId={selectedClientForProjects.id}\n            clientName={selectedClientForProjects.name}\n          />\n        </div>\n      )}\n    </div>\n  );\n\n  const renderPricing = () => {\n    const narratedPricing = config?.pricing?.narratedVideos || {};\n    const singingPackages = config?.pricing?.singingPackages || {};\n    const videoFeatures = narratedPricing?.videoFeatures || [];\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-2xl font-bold fire-text\">Gestión de Precios</h2>\n          <Button \n            onClick={() => refetchConfig()}\n            className=\"fire-gradient text-white font-semibold hover:opacity-90\"\n            data-testid=\"button-sync-calculator\"\n          >\n            <DollarSign className=\"mr-2\" size={16} />\n            Sincronizar con Calculadora\n          </Button>\n        </div>\n\n        {/* Videos Narrados */}\n        <Card className=\"glass-card fire-border p-6\">\n          <h3 className=\"text-xl font-bold mb-4 fire-text\">Videos Narrados - Precios Base</h3>\n          <div className=\"space-y-4\">\n            {narratedPricing?.durations && Object.entries(narratedPricing.durations).map(([key, value]: [string, any]) => (\n              <div key={key} className=\"grid md:grid-cols-3 gap-4 p-4 border border-border rounded-lg\">\n                <div>\n                  <Label>{value.label}</Label>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      type=\"number\"\n                      defaultValue={value.mxn}\n                      className=\"bg-input border-border focus:border-primary\"\n                      onChange={(e) => handlePricingUpdate(`narratedDuration-${key}`, 'mxn', parseInt(e.target.value))}\n                      data-testid={`input-duration-${key}-mxn`}\n                    />\n                    <span className=\"flex items-center text-muted-foreground\">MXN</span>\n                  </div>\n                </div>\n                <div>\n                  <Label>USD Equivalente</Label>\n                  <div className=\"flex space-x-2\">\n                    <Input\n                      type=\"number\"\n                      defaultValue={value.usd}\n                      className=\"bg-input border-border focus:border-primary\"\n                      onChange={(e) => handlePricingUpdate(`narratedDuration-${key}`, 'usd', parseInt(e.target.value))}\n                      data-testid={`input-duration-${key}-usd`}\n                    />\n                    <span className=\"flex items-center text-muted-foreground\">USD</span>\n                  </div>\n                </div>\n                <div className=\"flex items-end\">\n                  <Button \n                    className=\"w-full fire-gradient text-white font-semibold hover:opacity-90\"\n                    data-testid={`button-update-duration-${key}`}\n                  >\n                    Actualizar\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* Características */}\n          <div className=\"mt-6\">\n            <h4 className=\"text-lg font-semibold fire-text mb-3\">Características Incluidas</h4>\n            <div className=\"bg-muted/20 p-4 rounded-lg\">\n              <ul className=\"space-y-2 text-sm\">\n                {videoFeatures.map((feature: string, index: number) => (\n                  <li key={index} className=\"flex items-center space-x-2\">\n                    <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                    <span>{feature}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n        </Card>\n\n        {/* Videos Cantados */}\n        <Card className=\"glass-card fire-border p-6\">\n          <h3 className=\"text-xl font-bold mb-4 fire-text\">Videos Cantados - Paquetes</h3>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {Object.entries(singingPackages).map(([key, pkg]: [string, any]) => (\n              <div key={key} className=\"p-4 border border-border rounded-lg\">\n                <h4 className=\"font-semibold mb-3 fire-text\">{pkg.label}</h4>\n                <div className=\"space-y-3\">\n                  <div>\n                    <Label>Precio MXN</Label>\n                    <Input\n                      type=\"number\"\n                      defaultValue={pkg.mxn}\n                      className=\"bg-input border-border focus:border-primary\"\n                      onChange={(e) => handlePricingUpdate(`singingPackage-${key}`, 'mxn', parseInt(e.target.value))}\n                      data-testid={`input-singing-${key}-mxn`}\n                    />\n                  </div>\n                  <div>\n                    <Label>Precio USD</Label>\n                    <Input\n                      type=\"number\"\n                      defaultValue={pkg.usd}\n                      className=\"bg-input border-border focus:border-primary\"\n                      onChange={(e) => handlePricingUpdate(`singingPackage-${key}`, 'usd', parseInt(e.target.value))}\n                      data-testid={`input-singing-${key}-usd`}\n                    />\n                  </div>\n                  <div>\n                    <Label>Videos</Label>\n                    <Input\n                      type=\"number\"\n                      defaultValue={pkg.videos}\n                      className=\"bg-input border-border focus:border-primary\"\n                      onChange={(e) => handlePricingUpdate(`singingPackage-${key}`, 'videos', parseInt(e.target.value))}\n                      data-testid={`input-singing-${key}-videos`}\n                    />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </Card>\n\n        {/* Multiplicadores */}\n        <Card className=\"glass-card fire-border p-6\">\n          <h3 className=\"text-xl font-bold mb-4 fire-text\">Multiplicadores de Precio</h3>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-semibold mb-3\">Velocidad de Entrega</h4>\n              <div className=\"space-y-2\">\n                {narratedPricing?.speeds && Object.entries(narratedPricing.speeds).map(([key, value]: [string, any]) => (\n                  <div key={key} className=\"flex items-center space-x-2\">\n                    <Label className=\"flex-1\">{value.label}</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      defaultValue={value.multiplier}\n                      className=\"w-24 bg-input border-border focus:border-primary\"\n                      onChange={(e) => handlePricingUpdate(`speed-${key}`, 'multiplier', parseFloat(e.target.value))}\n                      data-testid={`input-speed-${key}`}\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div>\n              <h4 className=\"font-semibold mb-3\">Cantidad de Videos</h4>\n              <div className=\"space-y-2\">\n                {narratedPricing?.quantities && Object.entries(narratedPricing.quantities).map(([key, value]: [string, any]) => (\n                  <div key={key} className=\"flex items-center space-x-2\">\n                    <Label className=\"flex-1\">{value.label}</Label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      defaultValue={value.multiplier}\n                      className=\"w-24 bg-input border-border focus:border-primary\"\n                      onChange={(e) => handlePricingUpdate(`quantity-${key}`, 'multiplier', parseFloat(e.target.value))}\n                      data-testid={`input-quantity-${key}`}\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </Card>\n      </div>\n    );\n  };\n\n  // Show login screen if not authenticated\n  if (checkingAuth) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <AdminLogin onLogin={() => {\n      setIsAuthenticated(true);\n      checkAuthStatus();\n    }} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Admin Header */}\n      <header className=\"bg-card border-b border-border\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <h1 className=\"text-2xl font-bold fire-text\">Panel de Administración</h1>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setLocation('/')}\n                className=\"border-primary text-primary hover:bg-primary hover:text-white\"\n                data-testid=\"button-back-to-site\"\n              >\n                Volver al Sitio\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={handleLogout}\n                className=\"border-red-500 text-red-500 hover:bg-red-500 hover:text-white\"\n                data-testid=\"button-logout\"\n              >\n                <LogOut size={16} className=\"mr-2\" />\n                Cerrar Sesión\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Admin Content */}\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Tabs defaultValue=\"dashboard\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5 mb-8 glass-card fire-border\">\n            <TabsTrigger value=\"dashboard\" data-testid=\"tab-dashboard\">Dashboard</TabsTrigger>\n            <TabsTrigger value=\"clients\" data-testid=\"tab-clients\">Clientes</TabsTrigger>\n            <TabsTrigger value=\"pricing\" data-testid=\"tab-pricing\">Precios</TabsTrigger>\n            <TabsTrigger value=\"content\" data-testid=\"tab-content\">Contenido</TabsTrigger>\n            <TabsTrigger value=\"settings\" data-testid=\"tab-settings\">Configuración</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"dashboard\" className=\"space-y-6\">\n            {renderDashboard()}\n          </TabsContent>\n\n          <TabsContent value=\"clients\" className=\"space-y-6\">\n            {renderClients()}\n          </TabsContent>\n\n          <TabsContent value=\"pricing\" className=\"space-y-6\">\n            {renderPricing()}\n          </TabsContent>\n\n          <TabsContent value=\"content\" className=\"space-y-6\">\n            {renderContent()}\n          </TabsContent>\n\n          <TabsContent value=\"settings\" className=\"space-y-6\">\n            {renderSettings()}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":49665},"client/src/components/ClientPage.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { useConfig } from '@/contexts/ConfigContext';\nimport { Video, Download, FileArchive, FileText, Phone, Mail, Clock, CheckCircle } from 'lucide-react';\nimport type { Client } from '@shared/schema';\n\nexport default function ClientPage() {\n  const [location] = useLocation();\n  const { config } = useConfig();\n  const username = location.split('/').pop();\n\n  const { data: client, isLoading } = useQuery<Client>({\n    queryKey: ['/api/clients/username', username],\n    enabled: !!username,\n  });\n\n  const handleWhatsAppSupport = () => {\n    if (config?.whatsappNumber) {\n      const message = `Hola, soy ${client?.name} y necesito soporte con mi proyecto.`;\n      const whatsappUrl = `https://api.whatsapp.com/send?phone=${config.whatsappNumber.replace(/\\s+/g, '')}&text=${encodeURIComponent(message)}`;\n      window.open(whatsappUrl, '_blank');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"fire-text text-xl\">Cargando...</div>\n      </div>\n    );\n  }\n\n  if (!client) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"glass-card fire-border p-8 text-center\">\n          <h1 className=\"text-2xl font-bold fire-text mb-4\">Cliente no encontrado</h1>\n          <p className=\"text-muted-foreground\">El cliente solicitado no existe o el enlace no es válido.</p>\n        </Card>\n      </div>\n    );\n  }\n\n  const downloadFiles = [\n    {\n      id: '1',\n      name: 'Video_Corporativo_Final.mp4',\n      size: '245.6 MB',\n      type: 'video',\n      icon: Video\n    },\n    {\n      id: '2',\n      name: 'Videos_Adicionales.zip',\n      size: '1.2 GB',\n      type: 'archive',\n      icon: FileArchive\n    },\n    {\n      id: '3',\n      name: 'Licencia_y_Derechos.pdf',\n      size: '2.1 MB',\n      type: 'document',\n      icon: FileText\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-card to-background\">\n      {/* Client Header */}\n      <header className=\"glass-card border-b border-border\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"fire-gradient w-10 h-10 rounded-lg flex items-center justify-center\">\n                <Video className=\"text-white\" size={20} />\n              </div>\n              <span className=\"text-2xl font-bold fire-text\">VideoVenta</span>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-muted-foreground\">Cliente:</div>\n              <div className=\"font-semibold\" data-testid=\"text-client-name\">{client.name}</div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Client Content */}\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Welcome Section */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              <span className=\"fire-text\">Bienvenido,</span>\n              <span className=\"text-foreground ml-2\" data-testid=\"text-welcome-client\">{client.name}</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Aquí puedes descargar todos los archivos de tu proyecto y documentación asociada\n            </p>\n          </div>\n\n          {/* Project Information */}\n          <Card className=\"glass-card fire-border p-8 mb-8\">\n            <h2 className=\"text-2xl font-bold fire-text mb-6\">Información del Proyecto</h2>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Tipo de Proyecto</label>\n                  <p className=\"font-semibold\" data-testid=\"text-project-type\">Video Corporativo</p>\n                </div>\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Duración</label>\n                  <p className=\"font-semibold\" data-testid=\"text-project-duration\">10-15 minutos</p>\n                </div>\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Cantidad de Videos</label>\n                  <p className=\"font-semibold\" data-testid=\"text-project-quantity\">30 videos</p>\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Estado</label>\n                  <Badge className=\"bg-green-500/20 text-green-400 ml-2\" data-testid=\"badge-project-status\">\n                    Completado\n                  </Badge>\n                </div>\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Fecha de Entrega</label>\n                  <p className=\"font-semibold\" data-testid=\"text-delivery-date\">15 de Diciembre, 2024</p>\n                </div>\n                <div>\n                  <label className=\"text-sm text-muted-foreground\">Formato</label>\n                  <p className=\"font-semibold\" data-testid=\"text-project-format\">MP4 - 1080p HD</p>\n                </div>\n              </div>\n            </div>\n          </Card>\n\n          {/* Download Section */}\n          <Card className=\"glass-card fire-border p-8 mb-8\">\n            <h2 className=\"text-2xl font-bold fire-text mb-6\">\n              <Download className=\"inline mr-2\" size={24} />\n              Archivos de Descarga\n            </h2>\n            <div className=\"space-y-4\">\n              {downloadFiles.map((file) => (\n                <div \n                  key={file.id} \n                  className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-muted/20 transition-colors\"\n                  data-testid={`download-file-${file.id}`}\n                >\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"fire-gradient w-12 h-12 rounded-lg flex items-center justify-center\">\n                      <file.icon className=\"text-white\" size={20} />\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold\" data-testid={`text-file-name-${file.id}`}>{file.name}</h3>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`text-file-size-${file.id}`}>{file.size}</p>\n                    </div>\n                  </div>\n                  <Button \n                    className=\"fire-gradient text-white font-semibold hover:opacity-90\"\n                    data-testid={`button-download-${file.id}`}\n                  >\n                    <Download className=\"mr-2\" size={16} />\n                    Descargar\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </Card>\n\n          {/* Additional Information */}\n          <Card className=\"glass-card fire-border p-8\">\n            <h2 className=\"text-2xl font-bold fire-text mb-6\">\n              <CheckCircle className=\"inline mr-2\" size={24} />\n              Información Adicional\n            </h2>\n            <div className=\"grid md:grid-cols-2 gap-8\">\n              <div>\n                <h3 className=\"font-semibold mb-3\">Instrucciones de Uso</h3>\n                <ul className=\"space-y-2 text-muted-foreground\">\n                  <li className=\"flex items-start\" data-testid=\"instruction-optimized\">\n                    <CheckCircle className=\"text-primary mr-2 mt-1 flex-shrink-0\" size={16} />\n                    Los videos están optimizados para redes sociales y web\n                  </li>\n                  <li className=\"flex items-start\" data-testid=\"instruction-format\">\n                    <CheckCircle className=\"text-primary mr-2 mt-1 flex-shrink-0\" size={16} />\n                    Formato MP4 compatible con todas las plataformas\n                  </li>\n                  <li className=\"flex items-start\" data-testid=\"instruction-resolution\">\n                    <CheckCircle className=\"text-primary mr-2 mt-1 flex-shrink-0\" size={16} />\n                    Resolución 1080p para máxima calidad\n                  </li>\n                  <li className=\"flex items-start\" data-testid=\"instruction-audio\">\n                    <CheckCircle className=\"text-primary mr-2 mt-1 flex-shrink-0\" size={16} />\n                    Audio en calidad profesional 48kHz\n                  </li>\n                </ul>\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-3\">Soporte y Contacto</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\" data-testid=\"support-whatsapp\">\n                    <div className=\"fire-gradient w-8 h-8 rounded-lg flex items-center justify-center\">\n                      <Phone className=\"text-white\" size={14} />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">WhatsApp</p>\n                      <p className=\"font-semibold\">{config?.whatsappNumber || '+52 55 1234 5678'}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-3\" data-testid=\"support-email\">\n                    <div className=\"fire-gradient w-8 h-8 rounded-lg flex items-center justify-center\">\n                      <Mail className=\"text-white\" size={14} />\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Email</p>\n                      <p className=\"font-semibold\">soporte@videoventa.com</p>\n                    </div>\n                  </div>\n                  <Button \n                    onClick={handleWhatsAppSupport}\n                    className=\"w-full fire-gradient text-white font-semibold hover:opacity-90 mt-4\"\n                    data-testid=\"button-contact-support\"\n                  >\n                    <Phone className=\"mr-2\" size={16} />\n                    Contactar Soporte\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10610},"client/src/components/LandingPage.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useConfig } from '@/contexts/ConfigContext';\nimport { Phone, Play, Sparkles, ArrowRight, Trophy, Star, Zap } from 'lucide-react';\nimport PriceCalculator from './PriceCalculator';\nimport { useLocation } from 'wouter';\n\nexport default function LandingPage() {\n  const { config } = useConfig();\n  const [, navigate] = useLocation();\n  const [logoClickCount, setLogoClickCount] = React.useState(0);\n  const [showAdminHint, setShowAdminHint] = React.useState(false);\n\n  const scrollToSection = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleWhatsAppContact = () => {\n    if (config?.whatsappNumber) {\n      const message = \"Hola, me interesa obtener más información sobre los servicios de producción de videos.\";\n      const whatsappUrl = `https://api.whatsapp.com/send?phone=${config.whatsappNumber.replace(/\\s+/g, '')}&text=${encodeURIComponent(message)}`;\n      window.open(whatsappUrl, '_blank');\n    }\n  };\n\n  const handleLogoClick = () => {\n    const newCount = logoClickCount + 1;\n    setLogoClickCount(newCount);\n    \n    if (newCount === 5) {\n      // Navigate to admin panel after 5 clicks\n      navigate('/admin');\n      setLogoClickCount(0);\n    } else if (newCount >= 3) {\n      // Show hint after 3 clicks\n      setShowAdminHint(true);\n      setTimeout(() => setShowAdminHint(false), 2000);\n    }\n    \n    // Reset counter after 3 seconds of no clicks\n    setTimeout(() => {\n      setLogoClickCount(0);\n      setShowAdminHint(false);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground overflow-x-hidden\">\n      {/* Header con Logo clickeable para Admin */}\n      <header className=\"fixed top-0 left-0 right-0 z-50 bg-background/80 backdrop-blur-lg border-b border-border/50\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <button \n              onClick={handleLogoClick}\n              className=\"text-2xl font-bold fire-text cursor-pointer select-none\"\n              data-testid=\"logo-admin-access\"\n            >\n              {(config as any)?.businessName || 'VideoVenta'}\n            </button>\n            <nav className=\"flex items-center gap-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => scrollToSection('videos')}\n              >\n                Videos\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => scrollToSection('calculator')}\n              >\n                Cotizar\n              </Button>\n              <Button\n                size=\"sm\"\n                onClick={handleWhatsAppContact}\n                className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white\"\n              >\n                <Phone className=\"w-4 h-4 mr-1\" />\n                WhatsApp\n              </Button>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Price Calculator Section - FIRST */}\n      <section id=\"calculator\" className=\"py-20 relative pt-24\">\n        <div className=\"absolute inset-0 bg-gradient-to-b from-orange-900/5 to-red-900/5\"></div>\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative\">\n          <div className=\"text-center mb-16\">\n            <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-gradient-to-r from-orange-500/10 to-red-500/10 border border-primary/20 mb-6\">\n              <Sparkles className=\"w-4 h-4 text-primary\" />\n              <span className=\"text-sm font-medium text-primary\">Cotización Instantánea</span>\n            </div>\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4\">\n              <span className=\"bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent\">\n                {(config as any)?.siteContent?.calculatorTitle || 'Calcula tu Inversión'}\n              </span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              {(config as any)?.siteContent?.calculatorDescription || 'Obtén un presupuesto instantáneo y transparente para tu proyecto de video'}\n            </p>\n          </div>\n\n          <div className=\"max-w-6xl mx-auto\">\n            <Card className=\"p-8 bg-card/80 backdrop-blur-sm border-primary/20 shadow-2xl\">\n              <PriceCalculator />\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Sample Videos Section - SECOND */}\n      <section id=\"videos\" className=\"py-12 relative\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-3\">\n              <span className=\"bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent\">\n                Nuestro Trabajo\n              </span>\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Ejemplos de producciones que hemos realizado\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {(config as any)?.sampleVideos?.map((video: any, index: number) => (\n              <div\n                key={video.id || index}\n                className=\"group relative transform transition-all duration-500 hover:scale-105 hover:-translate-y-2\"\n                style={{ animationDelay: `${index * 0.1}s` }}\n                data-testid={`card-video-${index}`}\n              >\n                <Card className=\"overflow-hidden bg-gradient-to-br from-card to-card/50 border-primary/20 shadow-xl hover:shadow-2xl hover:shadow-primary/20 transition-all duration-500\">\n                  {/* Video thumbnail with overlay */}\n                  <div className=\"relative aspect-video overflow-hidden\">\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent z-10\"></div>\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-orange-600/30 to-red-600/30 mix-blend-overlay\"></div>\n                    \n                    {/* Play button overlay */}\n                    <div className=\"absolute inset-0 flex items-center justify-center z-20\">\n                      <div className=\"w-20 h-20 rounded-full bg-white/10 backdrop-blur-sm flex items-center justify-center group-hover:scale-110 transition-transform duration-300\">\n                        <div className=\"w-16 h-16 rounded-full bg-gradient-to-r from-orange-500 to-red-600 flex items-center justify-center shadow-lg\">\n                          <Play className=\"text-white w-8 h-8 ml-1\" fill=\"white\" />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Category badge */}\n                    <div className=\"absolute top-4 left-4 z-20\">\n                      <span className=\"px-3 py-1 rounded-full bg-black/50 backdrop-blur-sm text-white text-xs font-semibold\">\n                        {video.category || 'Promocional'}\n                      </span>\n                    </div>\n\n                    {video.thumbnail ? (\n                      <img\n                        src={video.thumbnail}\n                        alt={video.title}\n                        className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-700\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full bg-gradient-to-br from-orange-900/50 to-red-900/50\"></div>\n                    )}\n                  </div>\n\n                  <CardContent className=\"p-4\">\n                    <h3 className=\"text-lg font-bold mb-2 group-hover:text-primary transition-colors\">\n                      {video.title}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      {video.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Hero Section with Animated Background - THIRD */}\n      <section className=\"relative min-h-[90vh] flex items-center justify-center\">\n        {/* Animated gradient background */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-orange-900/20 via-red-900/10 to-background\"></div>\n        \n        {/* Pattern overlay */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute inset-0\" style={{\n            backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 35px, rgba(255,255,255,.05) 35px, rgba(255,255,255,.05) 70px)`,\n          }}></div>\n        </div>\n\n        {/* Floating particles */}\n        <div className=\"absolute inset-0 overflow-hidden\">\n          {[...Array(20)].map((_, i) => (\n            <div\n              key={i}\n              className=\"absolute animate-float\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n                animationDelay: `${Math.random() * 5}s`,\n                animationDuration: `${15 + Math.random() * 10}s`,\n              }}\n            >\n              <div className=\"w-1 h-1 bg-gradient-to-r from-orange-500 to-red-500 rounded-full opacity-60\"></div>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n          <div className=\"text-center max-w-5xl mx-auto animate-fade-in-up\">\n            <h1 className=\"text-5xl md:text-7xl lg:text-8xl font-bold mb-6 leading-tight\">\n              <span className=\"inline-block animate-text-gradient bg-gradient-to-r from-orange-400 via-red-500 to-orange-400 bg-clip-text text-transparent animate-gradient\" style={{ backgroundSize: '300%' }}>\n                {(config as any)?.siteContent?.heroTitle || 'VideoVenta'}\n              </span>\n            </h1>\n\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-12 max-w-3xl mx-auto leading-relaxed animate-fade-in\" style={{ animationDelay: '0.2s' }}>\n              {(config as any)?.siteContent?.heroDescription || 'Producción de videos profesionales para tu marca'}\n            </p>\n          </div>\n        </div>\n\n        {/* Scroll indicator */}\n        <div className=\"absolute bottom-8 left-1/2 -translate-x-1/2 animate-bounce\">\n          <div className=\"w-6 h-10 border-2 border-primary/50 rounded-full flex justify-center\">\n            <div className=\"w-1 h-3 bg-primary rounded-full mt-2 animate-scroll-down\"></div>\n          </div>\n        </div>\n      </section>\n\n      {/* Indicadores al final */}\n      <section className=\"py-12 bg-background/50\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex flex-wrap items-center justify-center gap-6\">\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Trophy className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-sm font-medium\">{(config as any)?.siteContent?.trustIndicators?.projects || '100+ Proyectos'}</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Star className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-sm font-medium\">{(config as any)?.siteContent?.trustIndicators?.rating || '5.0 Calificación'}</span>\n            </div>\n            <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <Zap className=\"w-5 h-5 text-primary\" />\n              <span className=\"text-sm font-medium\">{(config as any)?.siteContent?.trustIndicators?.delivery || 'Entrega Rápida'}</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-12 border-t border-border/50 bg-gradient-to-b from-background to-background/50\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center\">\n            <p className=\"text-muted-foreground mb-4\">\n              {(config as any)?.siteContent?.companyDescription || 'Producción de videos profesionales'}\n            </p>\n            {(config as any)?.siteContent?.contactEmail && (\n              <p className=\"text-sm text-muted-foreground\">\n                Email: {(config as any).siteContent.contactEmail}\n              </p>\n            )}\n            <div className=\"mt-6\">\n              <p className=\"text-sm text-muted-foreground/60\">\n                © 2025 Reelstudio.pro. Todos los derechos reservados.\n              </p>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":12972},"client/src/components/PriceCalculator.tsx":{"content":"import React from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useConfig } from '@/contexts/ConfigContext';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Phone, Video, Music, CheckCircle, Clock, Package, Sparkles, X, Timer, Zap, Gauge, Monitor } from 'lucide-react';\n\nexport default function PriceCalculator() {\n  const { config } = useConfig();\n  const [activeTab, setActiveTab] = React.useState('narrated');\n  \n  // Narrated videos state\n  const [duration, setDuration] = React.useState('5-10');\n  const [quantity, setQuantity] = React.useState('15');\n  const [speed, setSpeed] = React.useState('normal');\n  const [quality, setQuality] = React.useState('hd');\n  \n  // Singing videos state\n  const [selectedPackage, setSelectedPackage] = React.useState<string | null>(null);\n  const [singingSpeed, setSingingSpeed] = React.useState('normal');\n  const [singingQuality, setSingingQuality] = React.useState('hd');\n  \n  const [calculatedPrice, setCalculatedPrice] = React.useState<any>(null);\n  const [showQuoteModal, setShowQuoteModal] = React.useState(false);\n\n  const calculatePriceMutation = useMutation({\n    mutationFn: async (data: { duration: string; speed: string; quantity: string; quality?: string }) => {\n      const response = await apiRequest('POST', '/api/calculate-price', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setCalculatedPrice(data);\n    },\n  });\n\n  React.useEffect(() => {\n    if (activeTab === 'narrated') {\n      calculatePriceMutation.mutate({ duration, speed, quantity, quality });\n    }\n  }, [duration, speed, quantity, quality, activeTab]);\n\n  const pricing = config?.pricing as any;\n  const narratedPricing = pricing?.narratedVideos || pricing;\n  const singingPackages = pricing?.singingPackages || {};\n\n  // Calcular precio de paquete cantado con opciones\n  const calculateSingingPrice = (pkg: any, videoSpeed: string, videoQuality: string) => {\n    let price = pkg.mxn || 0;\n    \n    // Aplicar modificador de velocidad\n    if (videoSpeed === 'fast') price = Math.round(price * 1.2);\n    if (videoSpeed === 'express') price = Math.round(price * 1.4);\n    \n    // Aplicar modificador de calidad\n    if (videoQuality === '2k') price = Math.round(price * 1.10);\n    if (videoQuality === '4k') price = Math.round(price * 1.25);\n    \n    return price;\n  };\n\n  // Calcular días de entrega basado en cantidad\n  const getDeliveryDays = (videoQuantity: string | number, videoSpeed: string) => {\n    const qty = typeof videoQuantity === 'string' ? parseInt(videoQuantity) : videoQuantity;\n    let baseDays = { min: 2, max: 5 }; // Por defecto para 15 videos\n    \n    if (qty <= 15) {\n      baseDays = { min: 2, max: 5 };\n    } else if (qty <= 30) {\n      baseDays = { min: 4, max: 10 };\n    } else if (qty <= 60) {\n      baseDays = { min: 8, max: 15 };\n    } else {\n      baseDays = { min: 15, max: 30 };\n    }\n\n    // Ajustar según velocidad\n    if (videoSpeed === 'fast') {\n      baseDays.min = Math.max(1, Math.floor(baseDays.min * 0.7));\n      baseDays.max = Math.floor(baseDays.max * 0.7);\n    } else if (videoSpeed === 'express') {\n      baseDays.min = Math.max(1, Math.floor(baseDays.min * 0.5));\n      baseDays.max = Math.floor(baseDays.max * 0.5);\n    }\n\n    return `${baseDays.min}-${baseDays.max} días`;\n  };\n\n  const handleOrderNow = (type?: string, packageId?: string) => {\n    if (config?.whatsappNumber && (calculatedPrice || packageId)) {\n      let message = '';\n      if (type === 'singing' && packageId) {\n        const pkg = singingPackages[packageId];\n        const finalPrice = calculateSingingPrice(pkg, singingSpeed, singingQuality);\n        const qualityLabel = singingQuality === 'hd' ? 'HD' : singingQuality === '2k' ? '2K' : '4K';\n        const speedLabel = singingSpeed === 'normal' ? 'Normal' : singingSpeed === 'fast' ? 'Rápida' : 'Express';\n        \n        message = `¡Hola! Me interesa ordenar el paquete de videos cantados:\\n\\n📦 Paquete: ${pkg.label}\\n📹 Calidad: ${qualityLabel}\\n⚡ Entrega: ${speedLabel} (${getDeliveryDays(pkg.videos, singingSpeed)})\\n💰 Precio: $${finalPrice.toLocaleString()} MXN\\n🎬 Videos: ${pkg.videos}\\n\\n¿Podemos proceder con el pedido?`;\n      } else {\n        const durationLabel = narratedPricing?.durations?.[duration]?.label || duration;\n        const quantityLabel = narratedPricing?.quantities?.[quantity]?.label || quantity;\n        const qualityLabel = quality === 'hd' ? 'HD' : quality === '2k' ? '2K' : '4K';\n        const deliveryDays = getDeliveryDays(quantity, speed);\n        const finalPrice = calculatedPrice?.totalMXN || 0;  // Ya viene calculado con calidad\n        \n        message = `¡Hola! Me interesa ordenar videos narrados con las siguientes características:\\n\\n📏 Duración: ${durationLabel}\\n📦 Cantidad: ${quantityLabel}\\n📹 Calidad: ${qualityLabel}\\n⏱️ Entrega: ${deliveryDays}\\n💰 Total: $${finalPrice.toLocaleString()} MXN\\n\\n¿Podemos proceder con el pedido?`;\n      }\n      const whatsappUrl = `https://api.whatsapp.com/send?phone=${config.whatsappNumber.replace(/\\s+/g, '')}&text=${encodeURIComponent(message)}`;\n      window.open(whatsappUrl, '_blank');\n      setShowQuoteModal(false);\n    }\n  };\n\n  const QuoteModal = ({ type, packageId }: { type?: string; packageId?: string }) => {\n    const isNarrated = type !== 'singing';\n    const pkg = !isNarrated && packageId ? singingPackages[packageId] : null;\n    const finalPrice = isNarrated \n      ? calculatedPrice?.totalMXN || 0  // Ya viene calculado con calidad desde el backend\n      : pkg ? calculateSingingPrice(pkg, singingSpeed, singingQuality) : 0;\n    \n    return (\n      <Dialog open={showQuoteModal} onOpenChange={setShowQuoteModal}>\n        <DialogContent className=\"max-w-md bg-card/95 backdrop-blur-xl border-primary/20\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold text-center bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent\">\n              Resumen de tu Cotización\n            </DialogTitle>\n            <button\n              onClick={() => setShowQuoteModal(false)}\n              className=\"absolute right-4 top-4 rounded-sm opacity-70 hover:opacity-100 transition-opacity\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            {/* Tipo de Video */}\n            <div className=\"p-4 rounded-lg bg-gradient-to-r from-orange-500/10 to-red-500/10 border border-primary/20\">\n              <h3 className=\"font-semibold mb-2 flex items-center gap-2\">\n                {isNarrated ? <Video className=\"w-5 h-5 text-orange-500\" /> : <Music className=\"w-5 h-5 text-purple-500\" />}\n                {isNarrated ? 'Videos Narrados' : 'Videos Cantados'}\n              </h3>\n            </div>\n\n            {/* Detalles */}\n            <div className=\"space-y-3\">\n              {isNarrated ? (\n                <>\n                  <div className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                    <span className=\"text-muted-foreground\">Duración</span>\n                    <span className=\"font-semibold\">{narratedPricing?.durations?.[duration]?.label}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                    <span className=\"text-muted-foreground\">Cantidad</span>\n                    <span className=\"font-semibold\">{narratedPricing?.quantities?.[quantity]?.label}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                    <span className=\"text-muted-foreground\">Calidad</span>\n                    <span className=\"font-semibold\">{quality === 'hd' ? 'HD' : quality === '2k' ? '2K' : '4K'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                    <span className=\"text-muted-foreground\">Tiempo de entrega</span>\n                    <span className=\"font-semibold\">{getDeliveryDays(quantity, speed)}</span>\n                  </div>\n                </>\n              ) : pkg && (\n                <>\n                  <div className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                    <span className=\"text-muted-foreground\">Paquete</span>\n                    <span className=\"font-semibold\">{pkg.label}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                    <span className=\"text-muted-foreground\">Videos incluidos</span>\n                    <span className=\"font-semibold\">{pkg.videos}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                    <span className=\"text-muted-foreground\">Calidad</span>\n                    <span className=\"font-semibold\">{singingQuality === 'hd' ? 'HD' : singingQuality === '2k' ? '2K' : '4K'}</span>\n                  </div>\n                  <div className=\"flex justify-between items-center py-2 border-b border-border/30\">\n                    <span className=\"text-muted-foreground\">Tiempo de entrega</span>\n                    <span className=\"font-semibold\">{getDeliveryDays(pkg.videos, singingSpeed)}</span>\n                  </div>\n                </>\n              )}\n            </div>\n\n            {/* Precio Total */}\n            <div className=\"p-4 rounded-xl bg-gradient-to-r from-orange-500/20 to-red-500/20 border border-orange-500/30 text-center\">\n              <p className=\"text-sm text-muted-foreground mb-1\">Precio Total</p>\n              <div className=\"text-3xl font-bold bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent\">\n                ${finalPrice.toLocaleString()} MXN\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                (≈ ${Math.round(finalPrice / 18)} USD)\n              </p>\n            </div>\n\n            {/* Características incluidas */}\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium text-muted-foreground\">Incluye:</p>\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                <div className=\"flex items-center gap-1\">\n                  <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                  <span>Calidad {isNarrated ? quality.toUpperCase() : singingQuality.toUpperCase()}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                  <span>Edición profesional</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                  <span>Revisiones incluidas</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <CheckCircle className=\"w-3 h-3 text-green-500\" />\n                  <span>Entrega garantizada</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Botón de Acción */}\n            <Button \n              onClick={() => handleOrderNow(type, packageId)}\n              className=\"w-full h-12 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold text-lg shadow-lg hover:shadow-xl transition-all\"\n            >\n              <Phone className=\"mr-2\" size={20} />\n              Ordenar Ahora por WhatsApp\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  };\n\n  const renderNarratedVideos = () => {\n    // El precio ya viene calculado con calidad desde el backend\n    const finalPrice = calculatedPrice?.totalMXN || 0;\n    \n    return (\n      <div className=\"space-y-8\">\n        {/* Header elegante */}\n        <div className=\"text-center\">\n          <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-gradient-to-r from-orange-500/10 to-red-500/10 border border-orange-500/20 mb-4\">\n            <Video className=\"w-4 h-4 text-orange-500\" />\n            <span className=\"text-sm font-medium text-orange-500\">Producción Profesional</span>\n          </div>\n          <h3 className=\"text-2xl font-bold mb-2 bg-gradient-to-r from-orange-500 to-red-600 bg-clip-text text-transparent\">\n            Videos Narrados Premium\n          </h3>\n          <p className=\"text-muted-foreground\">\n            Contenido audiovisual narrado profesionalmente\n          </p>\n        </div>\n\n        {/* Selector de Duración con diseño de cards transparentes */}\n        <div>\n          <Label className=\"text-sm font-medium mb-3 block flex items-center gap-2\">\n            <Clock className=\"w-4 h-4 text-orange-500\" />\n            Duración del Video\n          </Label>\n          <div className=\"grid md:grid-cols-3 gap-3\">\n            {narratedPricing?.durations && Object.entries(narratedPricing.durations).map(([key, value]: [string, any], index: number) => (\n              <div\n                key={key}\n                className={`group relative transform transition-all duration-300 hover:scale-105 ${\n                  duration === key ? 'scale-105' : ''\n                }`}\n                style={{ animationDelay: `${index * 0.05}s` }}\n              >\n                {key === '10-20' && (\n                  <div className=\"absolute -top-2 left-1/2 -translate-x-1/2 z-10\">\n                    <span className=\"px-2 py-0.5 rounded-full bg-gradient-to-r from-orange-500 to-red-600 text-white text-xs font-semibold\">\n                      POPULAR\n                    </span>\n                  </div>\n                )}\n                \n                <Card\n                  onClick={() => setDuration(key)}\n                  className={`cursor-pointer overflow-hidden transition-all duration-300 ${\n                    duration === key \n                      ? 'border-2 border-orange-500 bg-gradient-to-br from-orange-900/20 to-red-900/20' \n                      : 'border-border/50 hover:border-orange-500/50 bg-card/50 backdrop-blur-sm'\n                  }`}\n                  data-testid={`duration-option-${key}`}\n                >\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className={`w-10 h-10 rounded-lg bg-gradient-to-r ${\n                        key === '5-10' ? 'from-green-500 to-emerald-600' :\n                        key === '10-20' ? 'from-orange-500 to-red-600' :\n                        'from-purple-500 to-pink-600'\n                      } p-0.5`}>\n                        <div className=\"w-full h-full rounded-md bg-background flex items-center justify-center\">\n                          <Timer className=\"w-5 h-5 text-primary\" />\n                        </div>\n                      </div>\n                      {duration === key && (\n                        <CheckCircle className=\"w-5 h-5 text-orange-500\" />\n                      )}\n                    </div>\n                    <div className=\"text-sm font-medium mb-1\">{value.label}</div>\n                    <div className=\"text-xl font-bold bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent\">\n                      ${value.mxn?.toLocaleString()}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">MXN base</div>\n                  </CardContent>\n                </Card>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Cantidad, Velocidad y Calidad */}\n        <div className=\"grid md:grid-cols-3 gap-4\">\n          {/* Cantidad */}\n          <Card className=\"overflow-hidden bg-gradient-to-br from-card/80 to-card/50 border-orange-500/20 backdrop-blur-sm\">\n            <CardContent className=\"p-4\">\n              <Label className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                <Package className=\"w-4 h-4 text-orange-500\" />\n                Cantidad\n              </Label>\n              <Select value={quantity} onValueChange={setQuantity}>\n                <SelectTrigger className=\"h-10\" data-testid=\"select-quantity\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {narratedPricing?.quantities && Object.entries(narratedPricing.quantities).map(([key, value]: [string, any]) => (\n                    <SelectItem key={key} value={key}>\n                      {value.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n\n          {/* Velocidad */}\n          <Card className=\"overflow-hidden bg-gradient-to-br from-card/80 to-card/50 border-orange-500/20 backdrop-blur-sm\">\n            <CardContent className=\"p-4\">\n              <Label className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                <Gauge className=\"w-4 h-4 text-orange-500\" />\n                Entrega\n              </Label>\n              <Select value={speed} onValueChange={setSpeed}>\n                <SelectTrigger className=\"h-10\" data-testid=\"select-speed\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"normal\">Normal ({getDeliveryDays(quantity, 'normal')})</SelectItem>\n                  <SelectItem value=\"fast\">Rápida ({getDeliveryDays(quantity, 'fast')})</SelectItem>\n                  <SelectItem value=\"express\">Express ({getDeliveryDays(quantity, 'express')})</SelectItem>\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n\n          {/* Calidad */}\n          <Card className=\"overflow-hidden bg-gradient-to-br from-card/80 to-card/50 border-orange-500/20 backdrop-blur-sm\">\n            <CardContent className=\"p-4\">\n              <Label className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n                <Monitor className=\"w-4 h-4 text-orange-500\" />\n                Calidad\n              </Label>\n              <Select value={quality} onValueChange={setQuality}>\n                <SelectTrigger className=\"h-10\" data-testid=\"select-quality\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"hd\">HD (1920x1080)</SelectItem>\n                  <SelectItem value=\"2k\">2K (+10%)</SelectItem>\n                  <SelectItem value=\"4k\">4K (+25%)</SelectItem>\n                </SelectContent>\n              </Select>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Grid inferior con características y precio */}\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Características con diseño transparente */}\n          <Card className=\"overflow-hidden bg-gradient-to-br from-orange-900/10 to-red-900/10 border-orange-500/20 backdrop-blur-sm\">\n            <CardContent className=\"p-6\">\n              <h3 className=\"font-semibold mb-4 flex items-center gap-2\">\n                <Sparkles className=\"w-5 h-5 text-orange-500\" />\n                Incluye en Videos Narrados\n              </h3>\n              <div className=\"grid gap-3 text-sm\">\n                {narratedPricing?.videoFeatures?.map((feature: string, index: number) => (\n                  <div key={index} className=\"flex items-start gap-3 group\">\n                    <div className={`mt-0.5 flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-gradient-to-r ${\n                      index === 0 ? 'from-green-500 to-emerald-500' :\n                      index === 1 ? 'from-yellow-500 to-orange-500' :\n                      index === 2 ? 'from-blue-500 to-cyan-500' :\n                      index === 3 ? 'from-purple-500 to-pink-500' :\n                      index === 4 ? 'from-red-500 to-pink-500' :\n                      'from-indigo-500 to-purple-500'\n                    } group-hover:scale-110 transition-transform`}>\n                      <CheckCircle className=\"h-4 w-4 text-white\" />\n                    </div>\n                    <span className=\"pt-1\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Precio Total con diseño premium */}\n          <Card className=\"overflow-hidden border-2 border-orange-500/30 bg-gradient-to-br from-orange-900/20 via-card to-red-900/20 backdrop-blur-sm\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-orange-500/5 to-red-500/5\"></div>\n            <CardContent className=\"relative p-6\">\n              <div className=\"text-center mb-4\">\n                <p className=\"text-sm text-muted-foreground mb-2\">Total a Pagar</p>\n                <div className=\"text-4xl font-bold bg-gradient-to-r from-orange-400 to-red-500 bg-clip-text text-transparent\" data-testid=\"text-total-price\">\n                  ${finalPrice.toLocaleString()}\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  MXN (≈ ${Math.round(finalPrice / 18)} USD)\n                </p>\n                <div className=\"mt-3 space-y-1\">\n                  <div className=\"p-2 rounded-lg bg-gradient-to-r from-orange-500/10 to-red-500/10 border border-orange-500/20\">\n                    <p className=\"text-xs text-orange-400 flex items-center justify-center gap-1\">\n                      <Clock className=\"w-3 h-3\" />\n                      Entrega: {getDeliveryDays(quantity, speed)}\n                    </p>\n                  </div>\n                  <div className=\"p-2 rounded-lg bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border border-blue-500/20\">\n                    <p className=\"text-xs text-blue-400 flex items-center justify-center gap-1\">\n                      <Monitor className=\"w-3 h-3\" />\n                      Calidad: {quality === 'hd' ? 'HD' : quality === '2k' ? '2K' : '4K'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n\n              <Button \n                onClick={() => setShowQuoteModal(true)}\n                className=\"w-full h-12 bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 text-white font-semibold shadow-lg hover:shadow-xl hover:scale-105 transition-all\"\n                data-testid=\"button-quote-narrated\"\n              >\n                <Sparkles className=\"mr-2\" size={18} />\n                Ver Cotización Completa\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Modal de cotización */}\n        <QuoteModal type=\"narrated\" />\n      </div>\n    );\n  };\n\n  const renderSingingVideos = () => (\n    <div>\n      {/* Header elegante */}\n      <div className=\"text-center mb-8\">\n        <div className=\"inline-flex items-center gap-2 px-4 py-2 rounded-full bg-gradient-to-r from-pink-500/10 to-purple-500/10 border border-purple-500/20 mb-4\">\n          <Music className=\"w-4 h-4 text-purple-500\" />\n          <span className=\"text-sm font-medium text-purple-500\">Paquetes Especiales</span>\n        </div>\n        <h3 className=\"text-2xl font-bold mb-2 bg-gradient-to-r from-purple-500 to-pink-600 bg-clip-text text-transparent\">\n          Videos Cantados Premium\n        </h3>\n        <p className=\"text-muted-foreground\">\n          Producción musical con letra personalizada\n        </p>\n      </div>\n\n      {/* Opciones de Velocidad y Calidad para videos cantados */}\n      <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n        {/* Velocidad de Entrega */}\n        <Card className=\"overflow-hidden bg-gradient-to-br from-card/80 to-card/50 border-purple-500/20 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <Label className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n              <Gauge className=\"w-4 h-4 text-purple-500\" />\n              Velocidad de Entrega\n            </Label>\n            <Select value={singingSpeed} onValueChange={setSingingSpeed}>\n              <SelectTrigger className=\"h-10\" data-testid=\"select-singing-speed\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"normal\">Normal ({getDeliveryDays(selectedPackage ? singingPackages[selectedPackage]?.videos : 15, 'normal')})</SelectItem>\n                <SelectItem value=\"fast\">Rápida ({getDeliveryDays(selectedPackage ? singingPackages[selectedPackage]?.videos : 15, 'fast')})</SelectItem>\n                <SelectItem value=\"express\">Express ({getDeliveryDays(selectedPackage ? singingPackages[selectedPackage]?.videos : 15, 'express')})</SelectItem>\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n\n        {/* Calidad */}\n        <Card className=\"overflow-hidden bg-gradient-to-br from-card/80 to-card/50 border-purple-500/20 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <Label className=\"text-sm font-medium mb-3 flex items-center gap-2\">\n              <Monitor className=\"w-4 h-4 text-purple-500\" />\n              Calidad de Video\n            </Label>\n            <Select value={singingQuality} onValueChange={setSingingQuality}>\n              <SelectTrigger className=\"h-10\" data-testid=\"select-singing-quality\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"hd\">HD (1920x1080)</SelectItem>\n                <SelectItem value=\"2k\">2K (+10%)</SelectItem>\n                <SelectItem value=\"4k\">4K (+25%)</SelectItem>\n              </SelectContent>\n            </Select>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Paquetes con diseño transparente */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n        {Object.entries(singingPackages).map(([key, pkg]: [string, any], index: number) => {\n          const finalPrice = calculateSingingPrice(pkg, singingSpeed, singingQuality);\n          \n          return (\n            <div\n              key={key}\n              className={`group relative transform transition-all duration-500 hover:scale-105 ${\n                selectedPackage === key ? 'scale-105' : ''\n              }`}\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              {key === 'standard' && (\n                <div className=\"absolute -top-2 left-1/2 -translate-x-1/2 z-10\">\n                  <span className=\"px-2 py-0.5 rounded-full bg-gradient-to-r from-purple-500 to-pink-600 text-white text-xs font-semibold\">\n                    POPULAR\n                  </span>\n                </div>\n              )}\n\n              <Card \n                className={`h-full cursor-pointer overflow-hidden transition-all duration-300 ${\n                  selectedPackage === key \n                    ? 'border-2 border-purple-500 bg-gradient-to-br from-purple-900/20 to-pink-900/20' \n                    : 'border-border/50 hover:border-purple-500/50 bg-card/50 backdrop-blur-sm'\n                }`}\n                onClick={() => setSelectedPackage(key)}\n                data-testid={`package-${key}`}\n              >\n                <CardContent className=\"p-4 text-center\">\n                  {/* Icon */}\n                  <div className={`mx-auto mb-3 h-12 w-12 rounded-xl bg-gradient-to-r ${\n                    key === 'basic' ? 'from-gray-500 to-gray-600' :\n                    key === 'standard' ? 'from-purple-500 to-pink-500' :\n                    key === 'premium' ? 'from-yellow-500 to-orange-500' :\n                    'from-cyan-500 to-blue-500'\n                  } p-0.5`}>\n                    <div className=\"flex h-full w-full items-center justify-center rounded-lg bg-background\">\n                      <Music className=\"h-6 w-6 text-primary\" />\n                    </div>\n                  </div>\n\n                  <h4 className=\"font-bold mb-2\">{pkg.label}</h4>\n                  <div className=\"text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-500 bg-clip-text text-transparent mb-1\">\n                    ${finalPrice.toLocaleString()}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mb-3\">MXN</div>\n                  \n                  <div className=\"space-y-1 text-xs mb-3\">\n                    <div className=\"flex items-center justify-center gap-1\">\n                      <Video className=\"w-3 h-3 text-purple-500\" />\n                      <span>{pkg.videos} videos</span>\n                    </div>\n                    <div className=\"text-muted-foreground\">\n                      {getDeliveryDays(pkg.videos, singingSpeed)}\n                    </div>\n                  </div>\n                  \n                  <Button \n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setShowQuoteModal(true);\n                    }}\n                    className={`w-full text-sm ${\n                      selectedPackage === key\n                        ? 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:from-purple-600 hover:to-pink-600'\n                        : 'bg-purple-500/10 hover:bg-purple-500/20'\n                    }`}\n                  >\n                    Cotizar\n                  </Button>\n                </CardContent>\n              </Card>\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Características con diseño transparente */}\n      <Card className=\"overflow-hidden bg-gradient-to-br from-purple-900/10 to-pink-900/10 border-purple-500/20 backdrop-blur-sm\">\n        <CardContent className=\"p-6\">\n          <h4 className=\"font-semibold mb-4 text-center\">Incluye en Videos Cantados</h4>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4 text-sm\">\n            {[\n              { icon: Music, text: \"Letra personalizada\", color: \"from-purple-500 to-pink-500\" },\n              { icon: Sparkles, text: \"Música profesional\", color: \"from-yellow-500 to-orange-500\" },\n              { icon: Video, text: \"Animaciones sincronizadas\", color: \"from-blue-500 to-cyan-500\" },\n              { icon: CheckCircle, text: \"Formato seleccionado\", color: \"from-green-500 to-emerald-500\" },\n              { icon: Clock, text: \"Entrega garantizada\", color: \"from-red-500 to-pink-500\" },\n              { icon: Zap, text: \"Revisiones incluidas\", color: \"from-orange-500 to-yellow-500\" }\n            ].map((feature, index) => (\n              <div key={index} className=\"flex items-start gap-3 group\">\n                <div className={`mt-0.5 flex h-8 w-8 shrink-0 items-center justify-center rounded-lg bg-gradient-to-r ${feature.color} group-hover:scale-110 transition-transform`}>\n                  <feature.icon className=\"h-4 w-4 text-white\" />\n                </div>\n                <span className=\"pt-1\">{feature.text}</span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Modal de cotización */}\n      {selectedPackage && <QuoteModal type=\"singing\" packageId={selectedPackage} />}\n    </div>\n  );\n\n  return (\n    <div className=\"w-full\">\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-2 h-12 p-1 bg-card/50 backdrop-blur-sm\">\n          <TabsTrigger \n            value=\"narrated\" \n            className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-red-600 data-[state=active]:text-white transition-all\"\n          >\n            <Video className=\"mr-2\" size={16} />\n            Videos Narrados\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"singing\" \n            className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-purple-500 data-[state=active]:to-pink-600 data-[state=active]:text-white transition-all\"\n          >\n            <Music className=\"mr-2\" size={16} />\n            Videos Cantados\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"narrated\" className=\"mt-6 animate-fade-in\">\n          {renderNarratedVideos()}\n        </TabsContent>\n        \n        <TabsContent value=\"singing\" className=\"mt-6 animate-fade-in\">\n          {renderSingingVideos()}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":33004},"client/src/contexts/ConfigContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { SiteConfig } from '@shared/schema';\n\ninterface ConfigContextType {\n  config: SiteConfig | null;\n  isLoading: boolean;\n  updateConfig: (updates: Partial<SiteConfig>) => Promise<void>;\n  refetchConfig: () => void;\n}\n\nconst ConfigContext = createContext<ConfigContextType | undefined>(undefined);\n\nexport function ConfigProvider({ children }: { children: React.ReactNode }) {\n  const queryClient = useQueryClient();\n\n  const { data: config, isLoading, refetch } = useQuery<SiteConfig>({\n    queryKey: ['/api/config'],\n    staleTime: 0, // Always fetch fresh data for real-time sync\n  });\n\n  const updateConfigMutation = useMutation({\n    mutationFn: async (updates: Partial<SiteConfig>) => {\n      const response = await apiRequest('PUT', '/api/config', updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/config'] });\n    },\n  });\n\n  const updateConfig = async (updates: Partial<SiteConfig>) => {\n    await updateConfigMutation.mutateAsync(updates);\n  };\n\n  const value: ConfigContextType = {\n    config: config || null,\n    isLoading,\n    updateConfig,\n    refetchConfig: refetch,\n  };\n\n  return (\n    <ConfigContext.Provider value={value}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n\nexport function useConfig() {\n  const context = useContext(ConfigContext);\n  if (context === undefined) {\n    throw new Error('useConfig must be used within a ConfigProvider');\n  }\n  return context;\n}\n","size_bytes":1689},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin.tsx":{"content":"import AdminPanel from \"@/components/AdminPanel\";\n\nexport default function Admin() {\n  return <AdminPanel />;\n}\n","size_bytes":112},"client/src/pages/client.tsx":{"content":"import { useRoute } from \"wouter\";\nimport ClientPortal from \"@/components/ClientPortal\";\n\nexport default function Client() {\n  const [, params] = useRoute(\"/client/:username\");\n  return <ClientPortal username={params?.username || ''} />;\n}\n","size_bytes":240},"client/src/pages/home.tsx":{"content":"import LandingPage from \"@/components/LandingPage\";\n\nexport default function Home() {\n  return <LandingPage />;\n}\n","size_bytes":114},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ClientPortal.tsx":{"content":"import React from 'react';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Download, FileVideo, FileText, Calendar, CheckCircle, Clock, Package, Shield } from 'lucide-react';\n\nexport default function ClientPortal({ username }: { username: string }) {\n  const [, setLocation] = useLocation();\n\n  const { data: client, isLoading } = useQuery({\n    queryKey: [`/api/clients/username/${username}`],\n    queryFn: async () => {\n      const response = await fetch(`/api/clients/username/${username}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new Error('Cliente no encontrado');\n        }\n        throw new Error('Error al cargar los datos');\n      }\n      return response.json();\n    },\n  });\n\n  const { data: projects = [] } = useQuery({\n    queryKey: [`/api/projects/client/${client?.id}`],\n    enabled: !!client?.id,\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/client/${client.id}`);\n      if (!response.ok) throw new Error('Error al cargar proyectos');\n      return response.json();\n    },\n  });\n\n  const generateCertificate = () => {\n    if (!client) return;\n    \n    const certificateWindow = window.open('', '_blank');\n    if (!certificateWindow) return;\n\n    const today = new Date();\n    const expiryDate = new Date();\n    expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n    \n    const certificateHTML = `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Certificado de Propiedad Intelectual</title>\n  <style>\n    @page { size: letter; margin: 1in; }\n    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }\n    .header { text-align: center; margin-bottom: 40px; border-bottom: 3px solid #ff6b00; padding-bottom: 20px; }\n    .logo { font-size: 32px; font-weight: bold; color: #ff6b00; margin-bottom: 10px; }\n    h1 { color: #ff6b00; text-align: center; margin-bottom: 30px; }\n    .info-section { margin-bottom: 30px; }\n    .info-row { margin-bottom: 10px; display: flex; }\n    .info-label { font-weight: bold; min-width: 150px; }\n    .file-list { background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0; }\n    .file-item { padding: 10px 0; border-bottom: 1px solid #ddd; }\n    .file-item:last-child { border-bottom: none; }\n    h2 { color: #333; font-size: 18px; margin-top: 30px; border-bottom: 2px solid #ff6b00; padding-bottom: 10px; }\n    .terms { margin-top: 30px; background: #fafafa; padding: 20px; border-left: 4px solid #ff6b00; }\n    .footer { text-align: center; margin-top: 50px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px; }\n    @media print {\n      .no-print { display: none; }\n      body { padding: 0; }\n    }\n  </style>\n</head>\n<body>\n  <div class=\"header\">\n    <div class=\"logo\">VideoVenta</div>\n    <h1>CERTIFICADO DE PROPIEDAD INTELECTUAL</h1>\n  </div>\n\n  <div class=\"info-section\">\n    <div class=\"info-row\">\n      <span class=\"info-label\">Cliente:</span>\n      <span>${client.name || 'N/A'}</span>\n    </div>\n    <div class=\"info-row\">\n      <span class=\"info-label\">Email:</span>\n      <span>${client.email || 'N/A'}</span>\n    </div>\n    <div class=\"info-row\">\n      <span class=\"info-label\">Fecha de emisión:</span>\n      <span>${today.toLocaleDateString('es-MX', { year: 'numeric', month: 'long', day: 'numeric' })}</span>\n    </div>\n  </div>\n\n  <h2>ARCHIVOS INCLUIDOS EN ESTE CERTIFICADO:</h2>\n  <div class=\"file-list\">\n    ${projects.map((project: any, index: number) => `\n      <div class=\"file-item\">\n        <strong>${index + 1}. ${project.name}</strong> (${project.type?.toUpperCase() || 'VIDEO'})\n        ${project.downloadLinks?.map((link: any) => `<br>• ${link.title}`).join('') || ''}\n      </div>\n    `).join('')}\n  </div>\n\n  <div class=\"terms\">\n    <h2>TÉRMINOS Y CONDICIONES:</h2>\n    <p>Por medio del presente documento, se certifica que <strong>${client.name}</strong> es el propietario intelectual legítimo de los archivos de video y contenido digital listados anteriormente.</p>\n\n    <h3 style=\"color: #ff6b00; font-size: 16px;\">DERECHOS DE PROPIEDAD:</h3>\n    <ul>\n      <li>El cliente tiene derechos exclusivos sobre el contenido entregado</li>\n      <li>Puede usar, modificar y distribuir el contenido según sus necesidades</li>\n      <li>Los archivos son de su propiedad completa tras la entrega</li>\n    </ul>\n\n    <h3 style=\"color: #ff6b00; font-size: 16px;\">ALMACENAMIENTO Y ACCESO:</h3>\n    <ul>\n      <li>Los archivos estarán disponibles en: <strong>https://videoventa.com/client/${username}</strong></li>\n      <li>Duración de almacenamiento: <strong>12 meses</strong></li>\n      <li>Fecha de vencimiento: <strong>${expiryDate.toLocaleDateString('es-MX', { year: 'numeric', month: 'long', day: 'numeric' })}</strong></li>\n    </ul>\n\n    <h3 style=\"color: #ff6b00; font-size: 16px;\">RESPONSABILIDADES:</h3>\n    <ul>\n      <li>VideoVenta garantiza la originalidad del contenido entregado</li>\n      <li>El cliente es responsable del uso apropiado del contenido</li>\n      <li>Se recomienda descargar y respaldar todos los archivos antes del vencimiento</li>\n    </ul>\n\n    <p style=\"margin-top: 20px;\"><strong>Este certificado es válido y tiene efectos legales.</strong></p>\n  </div>\n\n  <div class=\"footer\">\n    <p><strong>VideoVenta</strong><br>\n    Portal de Entregas Digitales<br>\n    Generado automáticamente el ${today.toLocaleString('es-MX')}</p>\n  </div>\n\n  <div class=\"no-print\" style=\"text-align: center; margin-top: 30px;\">\n    <button onclick=\"window.print()\" style=\"background: #ff6b00; color: white; border: none; padding: 10px 30px; border-radius: 5px; font-size: 16px; cursor: pointer;\">\n      Imprimir o Guardar como PDF\n    </button>\n  </div>\n</body>\n</html>\n    `;\n    \n    certificateWindow.document.write(certificateHTML);\n    certificateWindow.document.close();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!client) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Cliente no encontrado</h2>\n            <p className=\"text-muted-foreground mb-6\">\n              El enlace que estás intentando acceder no existe o ha expirado.\n            </p>\n            <Button onClick={() => setLocation('/')} className=\"fire-gradient\">\n              Ir al Inicio\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border/50 bg-card/50 backdrop-blur-lg sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <h1 className=\"text-2xl font-bold fire-text\">Portal de Cliente</h1>\n              <Badge variant=\"outline\">{client.username}</Badge>\n            </div>\n            <Button onClick={() => setLocation('/')} variant=\"outline\">\n              Cerrar Sesión\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Client Info */}\n      <section className=\"container mx-auto px-4 py-8\">\n        <Card className=\"glass-card fire-border mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"text-primary\" />\n              Información del Cliente\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Empresa</p>\n                <p className=\"font-semibold\">{client.name}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Email</p>\n                <p className=\"font-semibold\">{client.email || 'No especificado'}</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Teléfono</p>\n                <p className=\"font-semibold\">{client.phone || 'No especificado'}</p>\n              </div>\n            </div>\n            <div className=\"mt-6 flex gap-4\">\n              <Button onClick={generateCertificate} className=\"fire-gradient\">\n                <FileText className=\"mr-2\" size={16} />\n                Descargar Certificado de Propiedad\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Projects */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold fire-text\">Tus Proyectos</h2>\n          \n          {projects.length === 0 ? (\n            <Card className=\"glass-card\">\n              <CardContent className=\"p-12 text-center\">\n                <Package className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-xl text-muted-foreground\">\n                  No tienes proyectos disponibles en este momento\n                </p>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-6\">\n              {projects.map((project: any) => (\n                <Card key={project.id} className=\"glass-card fire-border\">\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <FileVideo className=\"text-primary\" />\n                        {project.name}\n                      </CardTitle>\n                      <Badge className={\n                        project.status === 'completed' ? 'bg-green-500/20 text-green-500' :\n                        project.status === 'in_progress' ? 'bg-yellow-500/20 text-yellow-500' :\n                        'bg-gray-500/20 text-gray-500'\n                      }>\n                        {project.status === 'completed' ? 'Completado' :\n                         project.status === 'in_progress' ? 'En Progreso' :\n                         'Pendiente'}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid md:grid-cols-3 gap-4 mb-6\">\n                      <div className=\"flex items-center gap-2\">\n                        <Package className=\"w-4 h-4 text-muted-foreground\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Tipo</p>\n                          <p className=\"font-semibold\">{project.type || 'Video'}</p>\n                        </div>\n                      </div>\n                      {project.duration && (\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Duración</p>\n                            <p className=\"font-semibold\">{project.duration}</p>\n                          </div>\n                        </div>\n                      )}\n                      {project.deliveryDate && (\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"w-4 h-4 text-muted-foreground\" />\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Fecha de Entrega</p>\n                            <p className=\"font-semibold\">\n                              {new Date(project.deliveryDate).toLocaleDateString('es-MX')}\n                            </p>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    {project.status === 'completed' && project.downloadLinks && project.downloadLinks.length > 0 && (\n                      <>\n                        <div className=\"border-t border-border/50 pt-4\">\n                          <h4 className=\"font-semibold mb-4 flex items-center gap-2\">\n                            <Download className=\"w-4 h-4 text-primary\" />\n                            Archivos Disponibles para Descarga\n                          </h4>\n                          <div className=\"grid gap-3\">\n                            {project.downloadLinks.map((link: any, index: number) => (\n                              <div key={link.id || index} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                                <div className=\"flex items-center gap-3\">\n                                  <FileVideo className=\"w-5 h-5 text-primary\" />\n                                  <div>\n                                    <p className=\"font-medium\">{link.title}</p>\n                                  </div>\n                                </div>\n                                <Button \n                                  onClick={() => window.open(link.url, '_blank')}\n                                  className=\"fire-gradient\"\n                                  size=\"sm\"\n                                >\n                                  <Download className=\"mr-1\" size={14} />\n                                  Descargar\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      </>\n                    )}\n\n                    {project.status !== 'completed' && (\n                      <div className=\"border-t border-border/50 pt-4\">\n                        <p className=\"text-muted-foreground flex items-center gap-2\">\n                          <Clock className=\"w-4 h-4\" />\n                          Este proyecto está {project.status === 'in_progress' ? 'en progreso' : 'pendiente'}. \n                          Los archivos estarán disponibles una vez completado.\n                        </p>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border/50 mt-12 py-8\">\n        <div className=\"container mx-auto px-4 text-center text-muted-foreground\">\n          <p>© 2024 VideoVenta. Todos los derechos reservados.</p>\n          <p className=\"text-sm mt-2\">\n            Los archivos estarán disponibles por 12 meses. Recomendamos descargarlos y hacer respaldo.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":15001},"client/src/components/AdminLogin.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Lock, AlertCircle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AdminLoginProps {\n  onLogin: () => void;\n}\n\nexport default function AdminLogin({ onLogin }: AdminLoginProps) {\n  const [password, setPassword] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setLoading(true);\n\n    try {\n      const response = await fetch('/api/admin/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ password }),\n        credentials: 'include',\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.success) {\n        toast({\n          title: \"Acceso Exitoso\",\n          description: \"Bienvenido al Panel de Administración\",\n        });\n        onLogin();\n      } else {\n        setError('Contraseña incorrecta');\n      }\n    } catch (error) {\n      setError('Error de conexión. Intente nuevamente.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-orange-950 via-red-950 to-orange-950 p-4\">\n      <div className=\"absolute inset-0 opacity-10\"></div>\n      \n      <Card className=\"glass-card fire-border w-full max-w-md relative z-10\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 rounded-full bg-gradient-to-r from-orange-500 to-red-600\">\n              <Lock className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl fire-text\">Panel de Administración</CardTitle>\n          <p className=\"text-muted-foreground mt-2\">Ingrese su contraseña para acceder</p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\" data-testid=\"form-admin-login\">\n            <div>\n              <Label htmlFor=\"password\">Contraseña</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Ingrese su contraseña\"\n                className=\"bg-input border-border focus:border-primary\"\n                required\n                data-testid=\"input-admin-password\"\n              />\n            </div>\n            \n            {error && (\n              <div className=\"flex items-center gap-2 text-red-500 text-sm\">\n                <AlertCircle size={16} />\n                {error}\n              </div>\n            )}\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full fire-gradient text-white font-semibold hover:opacity-90\"\n              disabled={loading}\n              data-testid=\"button-admin-login\"\n            >\n              {loading ? 'Verificando...' : 'Iniciar Sesión'}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3455},"client/src/components/ProjectManager.tsx":{"content":"import React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Edit, Trash2, Link, FileVideo, Download, Package, Eye } from 'lucide-react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface ProjectManagerProps {\n  clientId: string;\n  clientName: string;\n}\n\ninterface DownloadLink {\n  id?: string;\n  title: string;\n  url: string;\n}\n\nexport default function ProjectManager({ clientId, clientName }: ProjectManagerProps) {\n  const { toast } = useToast();\n  const [showAddProject, setShowAddProject] = useState(false);\n  const [editingProject, setEditingProject] = useState<any>(null);\n  const [showEditProject, setShowEditProject] = useState(false);\n  const [showManageLinks, setShowManageLinks] = useState(false);\n  const [selectedProject, setSelectedProject] = useState<any>(null);\n  const [newLink, setNewLink] = useState<DownloadLink>({ title: '', url: '' });\n\n  // Fetch projects for client\n  const { data: projects = [], isLoading } = useQuery({\n    queryKey: [`/api/projects/client/${clientId}`],\n    queryFn: async () => {\n      const response = await fetch(`/api/projects/client/${clientId}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Error al cargar proyectos');\n      return response.json();\n    },\n  });\n\n  // Create project mutation\n  const createProjectMutation = useMutation({\n    mutationFn: async (project: any) => {\n      const response = await apiRequest('POST', '/api/projects', project);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/projects/client/${clientId}`] });\n      setShowAddProject(false);\n      toast({\n        title: \"Proyecto creado\",\n        description: \"El proyecto se ha creado exitosamente\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Error creating project:', error);\n      let errorMessage = \"No se pudo crear el proyecto\";\n      \n      // Hacer el error más legible y copiable\n      if (error?.message) {\n        errorMessage = error.message;\n        // Copiar al portapapeles automáticamente\n        navigator.clipboard.writeText(error.message).catch(console.error);\n      }\n      \n      toast({\n        title: \"Error (copiado al portapapeles)\",\n        description: <div className=\"select-text\">{errorMessage}</div>,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update project mutation\n  const updateProjectMutation = useMutation({\n    mutationFn: async ({ id, ...updates }: any) => {\n      const response = await apiRequest('PUT', `/api/projects/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/projects/client/${clientId}`] });\n      setShowEditProject(false);\n      setShowManageLinks(false);\n      setEditingProject(null);\n      setSelectedProject(null);\n      toast({\n        title: \"Proyecto actualizado\",\n        description: \"Los cambios se han guardado exitosamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo actualizar el proyecto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete project mutation\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (projectId: string) => {\n      const response = await apiRequest('DELETE', `/api/projects/${projectId}`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/projects/client/${clientId}`] });\n      toast({\n        title: \"Proyecto eliminado\",\n        description: \"El proyecto se ha eliminado exitosamente\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"No se pudo eliminar el proyecto\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCreateProject = (formData: FormData) => {\n    const project = {\n      clientId,\n      name: formData.get('name') as string,\n      type: formData.get('type') as string,\n      status: formData.get('status') as string,\n      // No enviamos deliveryDate, es opcional\n    };\n    createProjectMutation.mutate(project);\n  };\n\n  const handleUpdateProject = (formData: FormData) => {\n    updateProjectMutation.mutate({\n      id: editingProject.id,\n      name: formData.get('name'),\n      type: formData.get('type'),\n      status: formData.get('status'),\n    });\n  };\n\n  const handleAddLink = () => {\n    if (!newLink.title || !newLink.url) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor complete todos los campos\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Asegurarse de que la URL tenga protocolo\n    let formattedUrl = newLink.url.trim();\n    if (!formattedUrl.match(/^https?:\\/\\//i)) {\n      formattedUrl = 'https://' + formattedUrl;\n    }\n\n    const currentLinks = selectedProject.downloadLinks || [];\n    const updatedLinks = [...currentLinks, { \n      title: newLink.title,\n      url: formattedUrl,\n      id: Date.now().toString() \n    }];\n    \n    updateProjectMutation.mutate({\n      id: selectedProject.id,\n      downloadLinks: updatedLinks,\n    });\n    \n    setNewLink({ title: '', url: '' });\n  };\n\n  const handleRemoveLink = (linkId: string) => {\n    const currentLinks = selectedProject.downloadLinks || [];\n    const updatedLinks = currentLinks.filter((link: any) => link.id !== linkId);\n    \n    updateProjectMutation.mutate({\n      id: selectedProject.id,\n      downloadLinks: updatedLinks,\n    });\n  };\n\n  if (isLoading) {\n    return <div className=\"animate-pulse\">Cargando proyectos...</div>;\n  }\n\n  return (\n    <Card className=\"glass-card fire-border\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Package className=\"text-primary\" />\n            Proyectos de {clientName}\n          </CardTitle>\n          <Dialog open={showAddProject} onOpenChange={setShowAddProject}>\n            <DialogTrigger asChild>\n              <Button className=\"fire-gradient text-white\" size=\"sm\">\n                <Plus className=\"mr-1\" size={16} />\n                Nuevo Proyecto\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"glass-card fire-border max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"fire-text\">Crear Nuevo Proyecto</DialogTitle>\n              </DialogHeader>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  handleCreateProject(new FormData(e.currentTarget));\n                }}\n                className=\"space-y-4\"\n              >\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"project-name\">Nombre del Proyecto</Label>\n                    <Input\n                      id=\"project-name\"\n                      name=\"name\"\n                      placeholder=\"Video Corporativo 2024\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"project-type\">Tipo</Label>\n                    <Select name=\"type\" defaultValue=\"narrated\">\n                      <SelectTrigger id=\"project-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"narrated\">Video Narrado</SelectItem>\n                        <SelectItem value=\"sung\">Video Cantado</SelectItem>\n                        <SelectItem value=\"mixed\">Mixto</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"project-status\">Estado</Label>\n                  <Select name=\"status\" defaultValue=\"pending\">\n                    <SelectTrigger id=\"project-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pendiente</SelectItem>\n                      <SelectItem value=\"in_progress\">En Progreso</SelectItem>\n                      <SelectItem value=\"completed\">Completado</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"bg-muted/50 p-3 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    🔗 Los enlaces de descarga se agregan después de crear el proyecto con el botón de cadena\n                  </p>\n                </div>\n                <div className=\"flex space-x-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setShowAddProject(false)} className=\"flex-1\">\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" className=\"flex-1 fire-gradient text-white\">\n                    Crear Proyecto\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {projects.length === 0 ? (\n          <p className=\"text-center text-muted-foreground py-8\">\n            No hay proyectos para este cliente\n          </p>\n        ) : (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Proyecto</TableHead>\n                <TableHead>Tipo</TableHead>\n                <TableHead>Estado</TableHead>\n                <TableHead>Enlaces</TableHead>\n                <TableHead>Acciones</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {projects.map((project: any) => (\n                <TableRow key={project.id}>\n                  <TableCell className=\"font-medium\">{project.name}</TableCell>\n                  <TableCell>{project.type || 'Video'}</TableCell>\n                  <TableCell>\n                    <Badge className={\n                      project.status === 'completed' ? 'bg-green-500/20 text-green-500' :\n                      project.status === 'in_progress' ? 'bg-yellow-500/20 text-yellow-500' :\n                      'bg-gray-500/20 text-gray-500'\n                    }>\n                      {project.status === 'completed' ? 'Completado' :\n                       project.status === 'in_progress' ? 'En Progreso' :\n                       'Pendiente'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\">\n                      {project.downloadLinks?.length || 0} enlaces\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => {\n                          setSelectedProject(project);\n                          setShowManageLinks(true);\n                        }}\n                        data-testid={`button-manage-links-${project.id}`}\n                        title=\"Agregar/Ver enlaces de descarga\"\n                        className=\"text-blue-500 hover:text-blue-600\"\n                      >\n                        <Link size={16} />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => {\n                          setEditingProject(project);\n                          setShowEditProject(true);\n                        }}\n                        data-testid={`button-edit-project-${project.id}`}\n                        title=\"Editar proyecto\"\n                      >\n                        <Edit size={16} />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"text-destructive\"\n                        onClick={() => {\n                          if (confirm('¿Está seguro de eliminar este proyecto?')) {\n                            deleteProjectMutation.mutate(project.id);\n                          }\n                        }}\n                        data-testid={`button-delete-project-${project.id}`}\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        )}\n\n        {/* Edit Project Dialog */}\n        <Dialog open={showEditProject} onOpenChange={setShowEditProject}>\n          <DialogContent className=\"glass-card fire-border max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle className=\"fire-text\">Editar Proyecto</DialogTitle>\n            </DialogHeader>\n            {editingProject && (\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  handleUpdateProject(new FormData(e.currentTarget));\n                }}\n                className=\"space-y-4\"\n              >\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"edit-project-name\">Nombre del Proyecto</Label>\n                    <Input\n                      id=\"edit-project-name\"\n                      name=\"name\"\n                      defaultValue={editingProject.name}\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"edit-project-type\">Tipo</Label>\n                    <Select name=\"type\" defaultValue={editingProject.type || 'narrated'}>\n                      <SelectTrigger id=\"edit-project-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"narrated\">Video Narrado</SelectItem>\n                        <SelectItem value=\"sung\">Video Cantado</SelectItem>\n                        <SelectItem value=\"mixed\">Mixto</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-project-status\">Estado</Label>\n                  <Select name=\"status\" defaultValue={editingProject.status}>\n                    <SelectTrigger id=\"edit-project-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pending\">Pendiente</SelectItem>\n                      <SelectItem value=\"in_progress\">En Progreso</SelectItem>\n                      <SelectItem value=\"completed\">Completado</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex space-x-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => {\n                    setShowEditProject(false);\n                    setEditingProject(null);\n                  }} className=\"flex-1\">\n                    Cancelar\n                  </Button>\n                  <Button type=\"submit\" className=\"flex-1 fire-gradient text-white\">\n                    Guardar Cambios\n                  </Button>\n                </div>\n              </form>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Manage Download Links Dialog */}\n        <Dialog open={showManageLinks} onOpenChange={setShowManageLinks}>\n          <DialogContent className=\"glass-card fire-border max-w-3xl\">\n            <DialogHeader>\n              <DialogTitle className=\"fire-text flex items-center gap-2\">\n                <Download className=\"text-primary\" />\n                Gestionar Enlaces de Descarga\n              </DialogTitle>\n            </DialogHeader>\n            {selectedProject && (\n              <div className=\"space-y-4\">\n                <div className=\"p-3 bg-muted/50 rounded-lg\">\n                  <p className=\"text-sm text-muted-foreground\">Proyecto:</p>\n                  <p className=\"font-semibold\">{selectedProject.name}</p>\n                </div>\n\n                {/* Add new link form */}\n                <div className=\"space-y-3 p-4 border border-border rounded-lg\">\n                  <h4 className=\"font-semibold\">Agregar Nuevo Enlace</h4>\n                  <div>\n                    <Label htmlFor=\"link-title\">Nombre del Archivo</Label>\n                    <Input\n                      id=\"link-title\"\n                      placeholder=\"Video Final HD\"\n                      value={newLink.title}\n                      onChange={(e) => setNewLink({ ...newLink, title: e.target.value })}\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"link-url\">Enlace de Descarga</Label>\n                    <Input\n                      id=\"link-url\"\n                      placeholder=\"Ejemplo: drive.google.com/file/... o wetransfer.com/...\"\n                      value={newLink.url}\n                      onChange={(e) => setNewLink({ ...newLink, url: e.target.value })}\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Puede ser cualquier enlace: Google Drive, WeTransfer, Dropbox, etc.\n                    </p>\n                  </div>\n                  <Button onClick={handleAddLink} className=\"fire-gradient text-white w-full\">\n                    <Plus className=\"mr-2\" size={16} />\n                    Agregar Enlace\n                  </Button>\n                </div>\n\n                {/* Existing links */}\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-semibold\">Enlaces Existentes</h4>\n                  {selectedProject.downloadLinks && selectedProject.downloadLinks.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {selectedProject.downloadLinks.map((link: any) => (\n                        <div key={link.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                          <div className=\"flex items-center gap-3 flex-1\">\n                            <FileVideo className=\"text-primary\" size={20} />\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium\">{link.title}</p>\n                              <p className=\"text-xs text-muted-foreground break-all\">{link.url}</p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              size=\"icon\"\n                              variant=\"ghost\"\n                              onClick={() => window.open(link.url, '_blank')}\n                              title=\"Probar enlace\"\n                            >\n                              <Eye size={16} />\n                            </Button>\n                            <Button\n                              size=\"icon\"\n                              variant=\"ghost\"\n                              className=\"text-destructive\"\n                              onClick={() => handleRemoveLink(link.id)}\n                              title=\"Eliminar enlace\"\n                            >\n                              <Trash2 size={16} />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center text-muted-foreground py-4\">\n                      No hay enlaces de descarga para este proyecto\n                    </p>\n                  )}\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowManageLinks(false);\n                    setSelectedProject(null);\n                  }}\n                  className=\"w-full\"\n                >\n                  Cerrar\n                </Button>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":21091}},"version":1}